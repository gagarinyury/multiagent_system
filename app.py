import os
import streamlit as st
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="–ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("ü§ñ –ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–µ–π
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π –∏–∑ .env
    anthropic_key = os.getenv("ANTHROPIC_API_KEY", "")
    openai_key = os.getenv("OPENAI_API_KEY", "")
    
    if not anthropic_key:
        st.warning("‚ö†Ô∏è API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        anthropic_key = st.text_input("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á Anthropic:", type="password")
    else:
        st.success("‚úÖ API –∫–ª—é—á Anthropic –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
    if not openai_key:
        st.warning("‚ö†Ô∏è API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        openai_key = st.text_input("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á OpenAI:", type="password")
    else:
        st.success("‚úÖ API –∫–ª—é—á OpenAI –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    st.divider()
    
    # –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ (–ø–æ–∫–∞ –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã)
    st.subheader("–ê–≥–µ–Ω—Ç—ã")
    agents = ["Planner", "Architect", "Coder", "Reviewer", "Tester", "Documenter"]
    active_agents = {}
    for agent in agents:
        active_agents[agent] = st.checkbox(agent, value=True)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ session_state
    if "active_agents" not in st.session_state:
        st.session_state.active_agents = active_agents

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.subheader("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Å–∏—Å—Ç–µ–º—ã:")
user_input = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", height=150)

if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"):
    if not user_input:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏!")
    else:
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."):
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            st.info("–°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
            st.success(f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {user_input[:50]}...")
            
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã
            st.subheader("–ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
            st.write("1. –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏")
            st.write("2. –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
            st.write("3. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
with st.expander("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"):
    st.write("**–í–µ—Ä—Å–∏—è:** 0.1.0 (–ø—Ä–æ—Ç–æ—Ç–∏–ø)")
    st.write("**–°—Ç–∞—Ç—É—Å:** –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    st.write("**–ö–æ–Ω—Ç–µ–∫—Å—Ç:** –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
    try:
        import platform
        system_info = platform.uname()
        st.write(f"**–°–µ—Ä–≤–µ—Ä:** {system_info.node}")
        st.write(f"**–û–°:** {system_info.system} {system_info.release}")
    except:
        pass

# –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ
st.info("üõ†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.")
