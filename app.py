# –§–∞–π–ª: app.py
# –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

import sys
import os
# üëá –î–æ–±–∞–≤–ª—è–µ–º —Å—é–¥–∞
os.environ["DEFAULT_CLAUDE_MODEL"] = "claude-3-7-sonnet-20250219"
# –î–û–ë–ê–í–õ–Ø–ï–ú –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path:
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import time
import streamlit as st
from dotenv import load_dotenv
import importlib

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
from orchestrator.core import Orchestrator
from orchestrator.workflow import WorkflowManager
from context.storage import ContextStorage
from context.optimizer import ContextOptimizer
from providers.anthropic import AnthropicProvider
from providers.openai import OpenAIProvider
from agents import (
    PlannerAgent, ArchitectAgent, CoderAgent, 
    ReviewerAgent, TesterAgent, DocumenterAgent, ProjectManagerAgent
)
from utils.logger import Logger
from utils.token_counter import TokenCounter
from ui.components import (
    render_sidebar, render_chat_history, 
    render_agent_workflow_progress, render_agent_output  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
)

# –ò–º–ø–æ—Ä—Ç –¥–ª—è ProjectManager
from ui.pages.project_manager import SecureProjectManager

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
SECRET_PASSWORD = os.getenv("STREAMLIT_PASSWORD", "default_password")

def check_password():
    def password_entered():
        if st.session_state["password"] == SECRET_PASSWORD:
            st.session_state["password_correct"] = True
            del st.session_state["password"]
        else:
            st.session_state["password_correct"] = False

    if "password_correct" not in st.session_state:
        st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password", on_change=password_entered, key="password"
        )
        return False
    elif not st.session_state["password_correct"]:
        st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password", on_change=password_entered, key="password"
        )
        st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        return False
    else:
        return True

if not check_password():
    st.stop()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = Logger(name="multiagent_system", level=os.getenv("LOG_LEVEL", "INFO"))
logger.info("–ó–∞–ø—É—Å–∫ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="–ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if "initialized" not in st.session_state:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context_storage = ContextStorage(os.getenv("DB_PATH", "data/db.sqlite"))
    context_optimizer = ContextOptimizer()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ API
    providers = {
        "claude": AnthropicProvider(os.getenv("ANTHROPIC_API_KEY", "")),
        "gpt": OpenAIProvider(os.getenv("OPENAI_API_KEY", ""))
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
    projects_root = os.getenv("PROJECTS_ROOT", "projects")
    project_manager = SecureProjectManager(projects_root=projects_root)
    logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω SecureProjectManager —Å –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {projects_root}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    orchestrator = Orchestrator(context_storage, providers)
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    orchestrator.project_manager = project_manager
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    workflow_manager = WorkflowManager(orchestrator)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
    st.session_state.context_storage = context_storage
    st.session_state.context_optimizer = context_optimizer
    st.session_state.providers = providers
    st.session_state.orchestrator = orchestrator
    st.session_state.workflow_manager = workflow_manager
    st.session_state.project_manager = project_manager  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
    st.session_state.messages = []
    st.session_state.initialized = True
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_active_agents = {
        "Planner": True,
        "Architect": True,
        "Coder": True,
        "Reviewer": True,
        "Tester": True,
        "Documenter": True,
        "ProjectManager": True  # –í–∫–ª—é—á–∞–µ–º ProjectManagerAgent –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    st.session_state.active_agents = default_active_agents
    orchestrator.configure_agents(default_active_agents)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    st.session_state.models = {
        "claude": os.getenv("DEFAULT_CLAUDE_MODEL", "claude-3-7-sonnet-20250219"),
        "gpt": os.getenv("DEFAULT_GPT_MODEL", "gpt-4-turbo")
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    st.session_state.agent_models = {}
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    st.session_state.agent_providers = {}
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    for provider_name, model_name in st.session_state.models.items():
        if provider_name in providers:
            providers[provider_name].set_model(model_name)
    
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
orchestrator = st.session_state.orchestrator
workflow_manager = st.session_state.workflow_manager
project_manager = st.session_state.project_manager  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("ü§ñ –ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∞–π–¥–±–∞—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
with st.sidebar:
    render_sidebar(orchestrator)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–µ
    if "active_agents" in st.session_state:
        orchestrator.configure_agents(st.session_state.active_agents)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö
    if "models" in st.session_state and "providers" in st.session_state:
        providers = st.session_state.providers
        for provider_name, model_name in st.session_state.models.items():
            if provider_name in providers:
                providers[provider_name].set_model(model_name)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    if "agent_models" in st.session_state:
        orchestrator.set_agent_models(st.session_state.agent_models)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    if "agent_providers" in st.session_state:
        for agent_name, provider_name in st.session_state.agent_providers.items():
            orchestrator.set_agent_provider(agent_name, provider_name)

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
from ui.pages.main import render_main_page

# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
render_main_page(orchestrator, workflow_manager)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if "ProjectManager" in orchestrator.agents:
    pm_agent = orchestrator.agents["ProjectManager"]
    if not hasattr(pm_agent, 'project_manager') or pm_agent.project_manager is None:
        pm_agent.project_manager = project_manager
        logger.info("ProjectManagerAgent –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ SecureProjectManager")