# –§–∞–π–ª: app.py
# –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

import sys
import os
# üëá –î–æ–±–∞–≤–ª—è–µ–º —Å—é–¥–∞
os.environ["DEFAULT_CLAUDE_MODEL"] = "claude-3-7-sonnet-20250219"
# –î–û–ë–ê–í–õ–Ø–ï–ú –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path:
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import time
import streamlit as st
from dotenv import load_dotenv
import importlib

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
from orchestrator.core import Orchestrator
from orchestrator.workflow import WorkflowManager
from context.storage import ContextStorage
from context.optimizer import ContextOptimizer
from providers.anthropic import AnthropicProvider
from providers.openai import OpenAIProvider
from agents import (
    PlannerAgent, ArchitectAgent, CoderAgent, 
    ReviewerAgent, TesterAgent, DocumenterAgent
)
from utils.logger import Logger
from utils.token_counter import TokenCounter
from ui.components import (
    render_sidebar, render_chat_history, 
    render_agent_workflow_progress, render_agent_output  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
SECRET_PASSWORD = os.getenv("STREAMLIT_PASSWORD", "default_password")

def check_password():
    def password_entered():
        if st.session_state["password"] == SECRET_PASSWORD:
            st.session_state["password_correct"] = True
            del st.session_state["password"]
        else:
            st.session_state["password_correct"] = False

    if "password_correct" not in st.session_state:
        st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password", on_change=password_entered, key="password"
        )
        return False
    elif not st.session_state["password_correct"]:
        st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password", on_change=password_entered, key="password"
        )
        st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        return False
    else:
        return True

if not check_password():
    st.stop()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = Logger(name="multiagent_system", level=os.getenv("LOG_LEVEL", "INFO"))
logger.info("–ó–∞–ø—É—Å–∫ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="–ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if "initialized" not in st.session_state:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context_storage = ContextStorage(os.getenv("DB_PATH", "data/db.sqlite"))
    context_optimizer = ContextOptimizer()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ API
    providers = {
        "claude": AnthropicProvider(os.getenv("ANTHROPIC_API_KEY", "")),
        "gpt": OpenAIProvider(os.getenv("OPENAI_API_KEY", ""))
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    orchestrator = Orchestrator(context_storage, providers)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    workflow_manager = WorkflowManager(orchestrator)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
    st.session_state.context_storage = context_storage
    st.session_state.context_optimizer = context_optimizer
    st.session_state.providers = providers
    st.session_state.orchestrator = orchestrator
    st.session_state.workflow_manager = workflow_manager
    st.session_state.messages = []
    st.session_state.initialized = True
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_active_agents = {
        "Planner": True,
        "Architect": True,
        "Coder": True,
        "Reviewer": True,
        "Tester": True,
        "Documenter": True
    }
    st.session_state.active_agents = default_active_agents
    orchestrator.configure_agents(default_active_agents)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    st.session_state.models = {
        "claude": os.getenv("DEFAULT_CLAUDE_MODEL", "claude-3-7-sonnet-20250219"),
        "gpt": os.getenv("DEFAULT_GPT_MODEL", "gpt-4-turbo")
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    st.session_state.agent_models = {}
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    for provider_name, model_name in st.session_state.models.items():
        if provider_name in providers:
            providers[provider_name].set_model(model_name)
    
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
orchestrator = st.session_state.orchestrator
workflow_manager = st.session_state.workflow_manager

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("ü§ñ –ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∞–π–¥–±–∞—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
with st.sidebar:
    render_sidebar(orchestrator)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–µ
    if "active_agents" in st.session_state:
        orchestrator.configure_agents(st.session_state.active_agents)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö
    if "models" in st.session_state and "providers" in st.session_state:
        providers = st.session_state.providers
        for provider_name, model_name in st.session_state.models.items():
            if provider_name in providers:
                providers[provider_name].set_model(model_name)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    if "agent_models" in st.session_state:
        orchestrator.set_agent_models(st.session_state.agent_models)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
render_agent_workflow_progress(orchestrator)

# –ß–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π
st.subheader("üí¨ –î–∏–∞–ª–æ–≥ —Å —Å–∏—Å—Ç–µ–º–æ–π")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
if "messages" in st.session_state:
    render_chat_history(st.session_state.messages)

# –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
user_input = st.text_area("–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å:", height=100)

# –í—ã–±–æ—Ä —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
workflow_options = {
    "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å",
    "code_only": "–¢–æ–ª—å–∫–æ –∫–æ–¥",
    "review_only": "–¢–æ–ª—å–∫–æ —Ä–µ–≤—å—é",
    "docs_only": "–¢–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
}
selected_workflow = st.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å:",
    options=list(workflow_options.keys()),
    format_func=lambda x: workflow_options.get(x, x)
)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
if selected_workflow:
    workflow_info = workflow_manager.get_workflow_info(selected_workflow)
    st.info(f"**{workflow_info.get('name', '')}**: {workflow_info.get('description', '')}")

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å
progress_container = st.empty()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å"):
    if not user_input:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å!")
    else:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        if "messages" not in st.session_state:
            st.session_state.messages = []
        
        st.session_state.messages.append({"role": "user", "content": user_input})
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with st.chat_message("user"):
            st.write(user_input)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö API –∫–ª—é—á–µ–π
            providers_configured = False
            for provider in st.session_state.providers.values():
                if provider.is_configured():
                    providers_configured = True
                    break
            
            if not providers_configured:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω API –∫–ª—é—á –≤ —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫!")
            else:
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
                start_time = time.time()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                import threading
                
                def update_progress():
                    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
                    while True:
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                        current_status = orchestrator.get_current_status()
                        if current_status["progress"] >= 100:
                            break
                            
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
                        with progress_container:
                            render_agent_workflow_progress(orchestrator)
                            
                        time.sleep(0.5)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress_thread = threading.Thread(target=update_progress)
                progress_thread.daemon = True  # Daemon-–ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
                progress_thread.start()
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å
                results = workflow_manager.execute_workflow(selected_workflow, user_input)
                total_time = time.time() - start_time
                
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress_container.empty()
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
                st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤")
                for agent_name, agent_result in results.items():
                    if "result" in agent_result:
                        render_agent_output(
                            agent_name, 
                            agent_result["result"], 
                            agent_result.get("elapsed_time"),
                            agent_result.get("model"),
                            agent_result.get("provider")
                        )
                
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                final_result = orchestrator._combine_results(results)
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                st.session_state.messages.append({
                    "role": "assistant", 
                    "content": final_result,
                    "tokens": sum(r.get("tokens", 0) for r in results.values() if isinstance(r, dict))
                })
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                with st.chat_message("assistant"):
                    st.write(final_result)
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                st.info(f"–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
with st.expander("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"):
    st.write("**–í–µ—Ä—Å–∏—è:** 0.1.0")
    st.write("**–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏:** –ê–ø—Ä–µ–ª—å 2025")
    st.write("**–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** –ö–æ–º–∞–Ω–¥–∞ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    if "orchestrator" in st.session_state:
        token_usage = orchestrator.get_token_usage()
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤", token_usage["total"])
        with col2:
            st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å ($)", token_usage["cost"])
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –∞–≥–µ–Ω—Ç–∞–º
        if "per_agent" in token_usage and token_usage["per_agent"]:
            st.subheader("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ –∞–≥–µ–Ω—Ç–∞–º")
            for agent, tokens in token_usage["per_agent"].items():
                st.write(f"**{agent}:** {tokens} —Ç–æ–∫–µ–Ω–æ–≤")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –º–æ–¥–µ–ª—è–º
        if "per_model" in token_usage and token_usage["per_model"]:
            st.subheader("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ –º–æ–¥–µ–ª—è–º")
            model_data = []
            for model, usage in token_usage["per_model"].items():
                input_tokens = usage.get("input", 0)
                output_tokens = usage.get("output", 0)
                model_data.append({
                    "–ú–æ–¥–µ–ª—å": model,
                    "–í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã": input_tokens,
                    "–í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã": output_tokens,
                    "–í—Å–µ–≥–æ": input_tokens + output_tokens
                })
            
            st.dataframe(model_data)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
    try:
        import platform
        system_info = platform.uname()
        st.write(f"**–°–µ—Ä–≤–µ—Ä:** {system_info.node}")
        st.write(f"**–û–°:** {system_info.system} {system_info.release}")
    except:
        pass