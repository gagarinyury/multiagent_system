"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit
"""

import streamlit as st
import datetime
import time
import pandas as pd
import plotly.express as px
import re # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è

# --- –ù–æ–≤—ã–π —Ä–µ–Ω–¥–µ—Ä-—Å–µ–ª–µ–∫—Ç–æ—Ä –º–æ–¥–µ–ª–∏ –∞–≥–µ–Ω—Ç–∞ ---
def render_agent_model_selector(agent_name, available_models, default_model):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞

    Args:
        agent_name: –ò–º—è –∞–≥–µ–Ω—Ç–∞
        available_models: –°–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π {id: –æ–ø–∏—Å–∞–Ω–∏–µ}
        default_model: –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    Returns:
        str: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    """
    agent_models = st.session_state.get("agent_models", {})
    current_model = agent_models.get(agent_name, default_model)

    key = f"model_selector_{agent_name}"

    selected_model = st.selectbox(
        f"–ú–æ–¥–µ–ª—å –¥–ª—è {agent_name}:",
        options=list(available_models.keys()),
        format_func=lambda x: available_models.get(x, x),
        index=list(available_models.keys()).index(current_model) if current_model in available_models else 0,
        key=key
    )

    if "agent_models" not in st.session_state:
        st.session_state.agent_models = {}
    st.session_state.agent_models[agent_name] = selected_model

    return selected_model

# --- –†–µ–Ω–¥–µ—Ä –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ ---
def render_sidebar(orchestrator=None):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

    Args:
        orchestrator: –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π (—Ç–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞)
        with st.expander("üîë API –ö–ª—é—á–∏", expanded=False):
             st.subheader("–°—Ç–∞—Ç—É—Å API")
             if orchestrator and orchestrator.providers:
                  for provider_name, provider in orchestrator.providers.items():
                       status = "success" if provider.is_configured() else "error"
                       status_text = "–ù–∞—Å—Ç—Ä–æ–µ–Ω" if provider.is_configured() else "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
                       icon = "‚úÖ" if status == "success" else "‚ùå"
                       st.markdown(f"{icon} **{provider_name.capitalize()}:** {status_text}")
                       if provider.is_configured() and hasattr(provider, 'model'):
                            st.caption(f"–ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {getattr(provider, 'model', 'N/A')}")
             else:
                  st.info("–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
             st.markdown("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏.")


        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
        with st.expander("ü§ñ –ê–≥–µ–Ω—Ç—ã", expanded=True):
            st.write("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")

            agents = {
                "Planner": "üìù –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫",
                "Architect": "üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä",
                "Coder": "üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç",
                "Reviewer": "üîç –†–µ–≤—å—é–µ—Ä",
                "Tester": "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫",
                "Documenter": "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä",
                "ProjectManager": "üìÅ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤"
            }
            agent_descriptions = {
                "Planner": "–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω",
                "Architect": "–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ—à–µ–Ω–∏—è",
                "Coder": "–ø–∏—à–µ—Ç –∫–æ–¥",
                "Reviewer": "–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –Ω–∞ –æ—à–∏–±–∫–∏",
                "Tester": "—Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç—ã",
                "Documenter": "–ø–∏—à–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é",
                "ProjectManager": "—Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
            }


            active_agents = st.session_state.get("active_agents", {})

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
            cols = st.columns(2)
            agent_list = list(agents.keys())
            for i, agent_key in enumerate(agent_list):
                 with cols[i % 2]: # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
                    active_agents[agent_key] = st.checkbox(
                        f"{agents[agent_key]} - {agent_descriptions[agent_key]}",
                        value=active_agents.get(agent_key, True),
                        key=f"sidebar_agent_{agent_key}"
                    )

            st.session_state.active_agents = active_agents

            if orchestrator:
                orchestrator.configure_agents(active_agents)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫)
        with st.expander("üß† –ú–æ–¥–µ–ª–∏", expanded=False):
            st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–µ–π")
            st.write("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏ –∞–≥–µ–Ω—Ç–æ–≤.")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ session_state
            if "models" in st.session_state:
                st.write("**–ú–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:**")
                st.write(f"- Claude: {st.session_state.models.get('claude', '–ù–µ –∑–∞–¥–∞–Ω–∞')}")
                st.write(f"- GPT: {st.session_state.models.get('gpt', '–ù–µ –∑–∞–¥–∞–Ω–∞')}")


        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
        with st.expander("üí∞ –¢–æ–∫–µ–Ω—ã –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å", expanded=False):
            if orchestrator:
                usage = orchestrator.get_token_usage()
                st.metric("–í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤", f"{usage['total']:,}")
                st.metric("–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å ($)", f"{usage['cost']:.6f}") # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–æ–ª—å—à–µ –∑–Ω–∞–∫–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏

                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –∞–≥–µ–Ω—Ç–∞–º –∏ –º–æ–¥–µ–ª—è–º (–∫—Ä–∞—Ç–∫–æ)
                if "per_agent" in usage and usage["per_agent"]:
                     st.caption("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ –∞–≥–µ–Ω—Ç–∞–º:")
                     agent_usage_str = ", ".join([f"{a}: {t:,}" for a, t in usage["per_agent"].items()])
                     st.caption(agent_usage_str)

                if "per_model" in usage and usage["per_model"]:
                     st.caption("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ –º–æ–¥–µ–ª—è–º:")
                     model_usage_str = ", ".join([f"{m}: {u.get('input',0)+u.get('output',0):,}" for m, u in usage["per_model"].items()])
                     st.caption(model_usage_str)

            else:
                st.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

            st.write("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ —Ç–æ–∫–µ–Ω–æ–≤.")


        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
        with st.expander("üìä –û —Å–∏—Å—Ç–µ–º–µ", expanded=False):
            st.write("**–í–µ—Ä—Å–∏—è:** 0.1.0")
            st.write("**–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏:** –ê–ø—Ä–µ–ª—å 2025")
            st.write("**–°–æ—Å—Ç–æ—è–Ω–∏–µ:** –ü—Ä–æ—Ç–æ—Ç–∏–ø")

            # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
            st.write(f"**–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:** {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
            try:
                import platform
                system_info = platform.uname()
                st.write(f"**–°–µ—Ä–≤–µ—Ä:** {system_info.node}")
                st.write(f"**–û–°:** {system_info.system} {system_info.release}")
            except:
                pass

# --- –†–µ–Ω–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ ---
def render_chat_history(messages):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞

    Args:
        messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    if not messages:
        st.info("–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∑–∞–ø—Ä–æ—Å.")
        return

    for message in messages:
        role = message.get("role", "unknown")
        content = message.get("content", "")
        # –¢–æ–∫–µ–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        tokens = message.get("tokens", None)

        with st.chat_message(role):
            st.markdown(content)
            if role == "assistant" and tokens is not None:
                 st.caption(f"–¢–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ: {tokens}")


# --- –ù–û–í–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø: –†–µ–Ω–¥–µ—Ä –ø–æ—Ç–æ–∫–∞ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º ---
def render_agent_workflow_progress(orchestrator):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Å—Ç–∞—Ç—É—Å–æ–º.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    agent_statuses = orchestrator.get_agent_statuses() if orchestrator else []

    if not agent_statuses:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
        if orchestrator and not orchestrator.get_active_agents():
             st.warning("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        # –ï—Å–ª–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —Å—Ç–∞—Ç—É—Å—ã –ø—É—Å—Ç—ã –ø–æ –¥—Ä—É–≥–æ–π –ø—Ä–∏—á–∏–Ω–µ
        # st.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤...") # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω—ã–º, UI main.py —Å–∞–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç spinner

        return # –ù–∏—á–µ–≥–æ –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤

    st.subheader("üîÑ –ü–æ—Ä—è–¥–æ–∫ —Ä–∞–±–æ—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤")

    # –ò–∫–æ–Ω–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤
    icons = {
        "Planner": "üìù",
        "Architect": "üèóÔ∏è",
        "Coder": "üíª",
        "Reviewer": "üîç",
        "Tester": "üß™",
        "Documenter": "üìö",
        "ProjectManager": "üìÅ"
    }
    # –¶–≤–µ—Ç–∞ –∏ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–æ–≤
    status_colors = {
        "pending": "üü° –û–∂–∏–¥–∞–Ω–∏–µ",
        "running": "üü† –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...",
        "done": "üü¢ –ì–æ—Ç–æ–≤–æ",
        "error": "üî¥ –û—à–∏–±–∫–∞"
    }

    cols = st.columns(len(agent_statuses))

    for i, agent in enumerate(agent_statuses):
        name = agent.get("name", f"–ê–≥–µ–Ω—Ç {i+1}")
        status = agent.get("status", "pending")
        elapsed = agent.get("elapsed_time")
        model = agent.get("model", "N/A")
        provider = agent.get("provider", "N/A")

        icon = icons.get(name, "ü§ñ")
        status_text = status_colors.get(status, "‚ö™Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        with cols[i]:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∫–æ–Ω–∫—É, –∏–º—è –∏ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            st.markdown(f"### {icon} {name}")
            st.markdown(f"**–°—Ç–∞—Ç—É—Å:** {status_text}")

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –º–æ–¥–µ–ª—å –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if status != "pending": # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                details = []
                if elapsed is not None:
                    details.append(f"‚è± {elapsed:.2f} —Å–µ–∫")
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–ª—è –∞–≥–µ–Ω—Ç–∞
                if model and model != "N/A":
                     details.append(f"üß† {model}")
                if provider and provider != "N/A":
                     details.append(f"üîå {provider}")

                if details:
                    st.caption(" | ".join(details))
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–û—à–∏–±–∫–∞", –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                if status == "error":
                     st.error("–°–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–≥–µ–Ω—Ç–∞.")


# --- –ù–û–í–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø: –†–µ–Ω–¥–µ—Ä –≤—ã–≤–æ–¥–∞ –∞–≥–µ–Ω—Ç–∞ ---
def render_agent_output(agent_name, output, elapsed_time=None, model=None, provider=None):
    """
    –†–µ–Ω–¥–µ—Ä –≤—ã–≤–æ–¥–∞ –∞–≥–µ–Ω—Ç–∞ –≤ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—é—â–µ–º—Å—è –±–ª–æ–∫–µ.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–¥-–±–ª–æ–∫–∏.
    """
    icons = {
        "Planner": "üìù",
        "Architect": "üèóÔ∏è",
        "Coder": "üíª",
        "Reviewer": "üîç",
        "Tester": "üß™",
        "Documenter": "üìö",
        "ProjectManager": "üìÅ"
    }
    icon = icons.get(agent_name, "ü§ñ")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—é—â–µ–≥–æ—Å—è –±–ª–æ–∫–∞
    title_parts = [f"{icon} **{agent_name}**"]
    details = []
    if elapsed_time is not None:
        details.append(f"‚è± {elapsed_time:.2f} —Å–µ–∫")
    if model:
        details.append(f"üß† {model}")
    if provider:
        details.append(f"üîå {provider}")

    if details:
        title_parts.append(" | ".join(details))

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –≤—ã–≤–æ–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "[Error]"
    is_error_output = isinstance(output, str) and output.strip().startswith("[Error]")
    if is_error_output:
        title_parts.insert(0, "üî¥") # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–Ω—ã–π –∫—Ä—É–∂–æ–∫ –≤ –Ω–∞—á–∞–ª–æ

    title = " ".join(title_parts)


    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—é—â–∏–π—Å—è –±–ª–æ–∫
    with st.expander(title, expanded=True):
        if is_error_output:
             st.error(output) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∫–∞–∫ –æ—à–∏–±–∫—É
        elif not output or output.strip() == "":
             st.info("–ê–≥–µ–Ω—Ç –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è.") # –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—ã–≤–æ–¥ –ø—É—Å—Ç
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –±–ª–æ–∫–∏ –∫–æ–¥–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Markdown
            code_pattern = re.compile(r"```([a-zA-Z0-9_+-]*)\n(.*?)```", re.DOTALL)
            last_end = 0
            code_blocks_found = False

            for m in code_pattern.finditer(output):
                code_blocks_found = True
                start, end = m.span()
                lang = m.group(1).strip()
                code = m.group(2).strip()

                # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –±–ª–æ–∫–æ–º –∫–æ–¥–∞
                if start > last_end:
                    st.markdown(output[last_end:start])

                # –í—ã–≤–æ–¥–∏–º —Å–∞–º –±–ª–æ–∫ –∫–æ–¥–∞
                st.code(code, language=lang if lang else None, line_numbers=True)
                last_end = end

            # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞ –∫–æ–¥–∞
            if last_end < len(output):
                st.markdown(output[last_end:])

            # –ï—Å–ª–∏ –±–ª–æ–∫–∏ –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤—ã–≤–æ–¥–∏–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ Markdown
            if not code_blocks_found:
                 st.markdown(output)


# --- –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ---
def render_project_selector(project_manager, with_creation=True):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ

    Args:
        project_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä SecureProjectManager
        with_creation: –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ª–∏ —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞

    Returns:
        str: –ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    projects = project_manager.list_projects()
    
    selected_project = None
    
    if projects:
        st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç:")
        selected_project = st.selectbox(
            "–ü—Ä–æ–µ–∫—Ç:",
            options=[""] + projects,
            format_func=lambda x: f"{x}" if x else "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç..."
        )
    
    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    if with_creation:
        with st.expander("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", expanded=not selected_project):
            with st.form("create_project_form"):
                new_project_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
                new_project_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    create_src = st.checkbox("–°–æ–∑–¥–∞—Ç—å src/", value=True)
                with col2:
                    create_docs = st.checkbox("–°–æ–∑–¥–∞—Ç—å docs/", value=True)
                with col3:
                    create_tests = st.checkbox("–°–æ–∑–¥–∞—Ç—å tests/", value=True)
                
                submit_button = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
                
                if submit_button and new_project_name:
                    result = project_manager.create_project(new_project_name)
                    
                    if result["success"]:
                        st.success(result["message"])
                        
                        # –°–æ–∑–¥–∞–µ–º README.md —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                        if new_project_description:
                            readme_content = f"# {new_project_name}\n\n{new_project_description}\n\n–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.\n"
                            project_manager.create_file(new_project_name, "README.md", readme_content)
                        
                        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                        if create_src:
                            project_manager.create_file(new_project_name, "src/.gitkeep", "")
                        if create_docs:
                            project_manager.create_file(new_project_name, "docs/.gitkeep", "")
                        if create_tests:
                            project_manager.create_file(new_project_name, "tests/.gitkeep", "")
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–π
                        selected_project = new_project_name
                    else:
                        st.error(result["message"])
    
    return selected_project


# --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –≤ –ø—Ä–æ–µ–∫—Ç ---
def render_save_to_project_button(code_blocks, project_manager):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∏ –¥–∏–∞–ª–æ–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –≤ –ø—Ä–æ–µ–∫—Ç

    Args:
        code_blocks: –°–ª–æ–≤–∞—Ä—å {–∏–º—è_—Ñ–∞–π–ª–∞: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ} –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –∫–æ–¥–æ–º
        project_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä SecureProjectManager

    Returns:
        bool: True, –µ—Å–ª–∏ –∫–æ–¥ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
    """
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç"):
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
        selected_project = render_project_selector(project_manager)
        
        if not selected_project:
            st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞.")
            return False
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–µ–∫—Å—Ç
        if isinstance(code_blocks, str):
            from agents.project_manager import ProjectManagerAgent
            temp_agent = ProjectManagerAgent()
            extracted_blocks = temp_agent.extract_file_blocks(code_blocks)
            if extracted_blocks:
                code_blocks = extracted_blocks
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –±–ª–æ–∫–∏, —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Ñ–∞–π–ª
                code_blocks = {"main.py": code_blocks}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –≤ –ø—Ä–æ–µ–∫—Ç
        with st.spinner("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç..."):
            success_count = 0
            error_messages = []
            
            for file_path, content in code_blocks.items():
                result = project_manager.create_file(selected_project, file_path, content)
                if result["success"]:
                    success_count += 1
                else:
                    error_messages.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {file_path}: {result['message']}")
            
            if success_count > 0:
                st.success(f"–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {success_count} —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç '{selected_project}'")
            
            if error_messages:
                for error in error_messages:
                    st.error(error)
            
            return success_count > 0 and not error_messages
    
    return False


# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã UI (–∞–Ω–∏–º–∞—Ü–∏—è, –≥—Ä–∞—Ñ–∏–∫–∏, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ —Ç.–¥.)
def render_processing_animation():
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    """
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
    # –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é Streamlit spinner
    pass # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ render_agent_workflow_progress


def render_token_usage_chart(token_usage):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (–ø–æ –∞–≥–µ–Ω—Ç–∞–º)
    """
    if "per_agent" in token_usage and token_usage["per_agent"]:
        agent_data = pd.DataFrame({
            "–ê–≥–µ–Ω—Ç": list(token_usage["per_agent"].keys()),
            "–¢–æ–∫–µ–Ω—ã": list(token_usage["per_agent"].values())
        })

        total = agent_data["–¢–æ–∫–µ–Ω—ã"].sum()
        if total > 0:
            agent_data["–ü—Ä–æ—Ü–µ–Ω—Ç"] = agent_data["–¢–æ–∫–µ–Ω—ã"] / total * 100
        else:
            agent_data["–ü—Ä–æ—Ü–µ–Ω—Ç"] = 0

        fig = px.bar(
            agent_data,
            x="–ê–≥–µ–Ω—Ç",
            y="–¢–æ–∫–µ–Ω—ã",
            text=agent_data["–ü—Ä–æ—Ü–µ–Ω—Ç"].apply(lambda x: f"{x:.1f}%") if total > 0 else "",
            color="–ê–≥–µ–Ω—Ç",
            title="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –∞–≥–µ–Ω—Ç–∞–º"
        )

        fig.update_traces(textposition="outside")
        fig.update_layout(
            xaxis_title="–ê–≥–µ–Ω—Ç",
            yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤",
            height=400
        )

        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –∞–≥–µ–Ω—Ç–∞–º")

# –°–µ–ª–µ–∫—Ç–æ—Ä—ã, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞, –∑–∞–≥—Ä—É–∑—á–∏–∫–∏ –∏ —Ç.–¥.
def render_model_selector(models, provider_name, on_change=None):
     # ... (–∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º)
     pass

def render_workflow_selector(workflows, on_change=None):
     # ... (–∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º)
     pass

def render_status_indicator(status, text=None):
    icons = {
        "success": "‚úÖ",
        "warning": "‚ö†Ô∏è",
        "error": "‚ùå",
        "info": "‚ÑπÔ∏è",
        "loading": "üîÑ",
        "pending": "üü°", # –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–∫–æ–Ω–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        "running": "üü†",
        "done": "üü¢",
    }

    icon = icons.get(status, "‚ÑπÔ∏è")

    if text:
        st.markdown(f"{icon} {text}")
    else:
        st.markdown(icon)

def render_file_uploader(label, type, key, help=None):
     # ... (–∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º)
     pass

def render_download_button(content, file_name, label="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", mime=None):
     # ... (–∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º)
     pass

def render_code_editor(code, language="python", height=300, key=None):
     # ... (–∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º)
     pass

def render_tabs_interface(tabs_content, default_tab=0):
     # ... (–∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º)
     pass

def render_metrics_panel(metrics):
     # ... (–∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º)
     pass

def render_agent_info(agent_name, description=None, capabilities=None):
     # ... (–∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º)
     pass

def render_api_status(providers):
     # ... (–∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º)
     pass

def render_settings_form(orchestrator, on_save=None):
     # ... (–∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º)
     pass