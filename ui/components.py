"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit
"""


import streamlit as st
import datetime
import time
import pandas as pd
import plotly.express as px


# --- –ù–æ–≤—ã–π —Ä–µ–Ω–¥–µ—Ä-—Å–µ–ª–µ–∫—Ç–æ—Ä –º–æ–¥–µ–ª–∏ –∞–≥–µ–Ω—Ç–∞ ---
def render_agent_model_selector(agent_name, available_models, default_model):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    
    Args:
        agent_name: –ò–º—è –∞–≥–µ–Ω—Ç–∞
        available_models: –°–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π {id: –æ–ø–∏—Å–∞–Ω–∏–µ}
        default_model: –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
    Returns:
        str: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    """
    agent_models = st.session_state.get("agent_models", {})
    current_model = agent_models.get(agent_name, default_model)
    
    key = f"model_selector_{agent_name}"
    
    selected_model = st.selectbox(
        f"–ú–æ–¥–µ–ª—å –¥–ª—è {agent_name}:",
        options=list(available_models.keys()),
        format_func=lambda x: available_models.get(x, x),
        index=list(available_models.keys()).index(current_model) if current_model in available_models else 0,
        key=key
    )
    
    if "agent_models" not in st.session_state:
        st.session_state.agent_models = {}
    st.session_state.agent_models[agent_name] = selected_model
    
    return selected_model

def render_sidebar(orchestrator=None):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    
    Args:
        orchestrator: –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
        with st.expander("üîë API –ö–ª—é—á–∏", expanded=False):
            anthropic_key = st.text_input("API –∫–ª—é—á Anthropic (Claude):", type="password")
            openai_key = st.text_input("API –∫–ª—é—á OpenAI (GPT):", type="password")
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π
            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á–∏"):
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–π –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
                if orchestrator:
                    if anthropic_key:
                        orchestrator.set_provider_key("claude", anthropic_key)
                    if openai_key:
                        orchestrator.set_provider_key("gpt", openai_key)
                
                st.success("–ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
        with st.expander("ü§ñ –ê–≥–µ–Ω—Ç—ã", expanded=True):
            st.write("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
            
            agents = {
                "Planner": "üìù –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω",
                "Architect": "üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä - –ø—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ—à–µ–Ω–∏—è",
                "Coder": "üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç - –ø–∏—à–µ—Ç –∫–æ–¥",
                "Reviewer": "üîç –†–µ–≤—å—é–µ—Ä - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –Ω–∞ –æ—à–∏–±–∫–∏",
                "Tester": "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ - —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç—ã",
                "Documenter": "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä - –ø–∏—à–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"
            }
            
            active_agents = st.session_state.get("active_agents", {})
            
            for agent_key, agent_desc in agents.items():
                active_agents[agent_key] = st.checkbox(
                    agent_desc, 
                    value=active_agents.get(agent_key, True),
                    key=f"sidebar_agent_{agent_key}"
                )
            
            st.session_state.active_agents = active_agents
            
            if orchestrator:
                orchestrator.configure_agents(active_agents)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π
        with st.expander("üß† –ú–æ–¥–µ–ª–∏", expanded=True):
            st.subheader("–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–µ–π")
            
            claude_models = {
                "claude-3-opus-20240229": "Claude 3 Opus (–º–æ—â–Ω–∞—è, –º–µ–¥–ª–µ–Ω–Ω–∞—è)",
                "claude-3-7-sonnet-20250219": "Claude 3 Sonnet (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)",
                "claude-3-haiku-20240307": "Claude 3 Haiku (–±—ã—Å—Ç—Ä–∞—è, —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è)",
                "claude-3-7-sonnet-20250219": "Claude 3.7 Sonnet (–Ω–æ–≤–µ–π—à–∞—è –≤–µ—Ä—Å–∏—è)"
            }
            
            gpt_models = {
                "gpt-4-turbo-preview": "GPT-4 Turbo (–º–æ—â–Ω–∞—è, –º–µ–¥–ª–µ–Ω–Ω–∞—è)",
                "gpt-4": "GPT-4 (–ø—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è)",
                "gpt-3.5-turbo": "GPT-3.5 Turbo (–±—ã—Å—Ç—Ä–∞—è, —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è)"
            }
            
            models = st.session_state.get("models", {
                "claude": "claude-3-7-sonnet-20250219", 
                "gpt": "gpt-4-turbo-preview"
            })
            
            st.write("**–ú–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:**")
            col1, col2 = st.columns(2)
            
            with col1:
                selected_claude = st.selectbox(
                    "Claude:",
                    options=list(claude_models.keys()),
                    format_func=lambda x: claude_models.get(x, x),
                    index=list(claude_models.keys()).index(
                        models.get("claude", "claude-3-7-sonnet-20250219")
                    ) if models.get("claude", "claude-3-7-sonnet-20250219") in claude_models else 1
                )
            
            with col2:
                selected_gpt = st.selectbox(
                    "GPT:",
                    options=list(gpt_models.keys()),
                    format_func=lambda x: gpt_models.get(x, x),
                    index=list(gpt_models.keys()).index(models.get("gpt", "gpt-4-turbo-preview")) if models.get("gpt") in gpt_models else 0
                )
            
            st.session_state.models = {
                "claude": selected_claude,
                "gpt": selected_gpt
            }
            
            st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∞–≥–µ–Ω—Ç–∞–º")
            st.write("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞:")
            
            if "agent_models" not in st.session_state:
                st.session_state.agent_models = {}
            
            active_agents = st.session_state.get("active_agents", {})
            active_agent_names = [name for name, active in active_agents.items() if active]
            
            for agent_name in active_agent_names:
                st.write(f"**{agent_name}**")
                
                provider_key = f"provider_{agent_name}"
                provider_options = {"claude": "Claude", "gpt": "GPT"}
                default_provider = st.session_state.get(provider_key, "claude")
                
                provider = st.radio(
                    f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è {agent_name}:",
                    options=list(provider_options.keys()),
                    format_func=lambda x: provider_options.get(x, x),
                    index=list(provider_options.keys()).index(default_provider) if default_provider in provider_options else 0,
                    key=provider_key,
                    horizontal=True
                )
                
                st.session_state.setdefault(provider_key, provider)
                
                available_models = claude_models if provider == "claude" else gpt_models
                default_model = models.get(provider)
                
                render_agent_model_selector(agent_name, available_models, default_model)
                
                st.divider()
            
            if orchestrator and "agent_models" in st.session_state:
                orchestrator.set_agent_models(st.session_state.agent_models)
                
                for agent_name in active_agent_names:
                    provider_key = f"provider_{agent_name}"
                    if provider_key in st.session_state:
                        orchestrator.set_agent_provider(agent_name, st.session_state[provider_key])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
        with st.expander("üí∞ –¢–æ–∫–µ–Ω—ã –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å", expanded=False):
            if orchestrator:
                usage = orchestrator.get_token_usage()
                st.metric("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤", f"{usage['total']:,}")
                st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å ($)", f"{usage['cost']:.4f}")
            else:
                st.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
            
            st.write("–õ–∏–º–∏—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤:")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–∏–º–∏—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
            token_limits = st.session_state.get("token_limits", {"max_per_request": 4000})
            
            max_tokens_per_request = st.slider(
                "–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å:", 
                100, 8000, 
                token_limits.get("max_per_request", 4000), 
                100
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ session_state
            st.session_state.token_limits = {
                "max_per_request": max_tokens_per_request
            }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
        with st.expander("üìä –û —Å–∏—Å—Ç–µ–º–µ", expanded=False):
            st.write("**–í–µ—Ä—Å–∏—è:** 0.1.0")
            st.write("**–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏:** –ê–ø—Ä–µ–ª—å 2025")
            st.write("**–°–æ—Å—Ç–æ—è–Ω–∏–µ:** –ü—Ä–æ—Ç–æ—Ç–∏–ø")
            
            # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
            st.write(f"**–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:** {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
            try:
                import platform
                system_info = platform.uname()
                st.write(f"**–°–µ—Ä–≤–µ—Ä:** {system_info.node}")
                st.write(f"**–û–°:** {system_info.system} {system_info.release}")
            except:
                pass

def render_chat_history(messages):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    
    Args:
        messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    if not messages:
        st.info("–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∑–∞–ø—Ä–æ—Å.")
        return
    
    for message in messages:
        role = message.get("role", "unknown")
        content = message.get("content", "")
        
        with st.chat_message(role):
            st.markdown(content)

def render_agent_workflow(active_agents):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
    
    Args:
        active_agents: –°–ª–æ–≤–∞—Ä—å —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
    """
    st.subheader("üîÑ –ü–æ—Ä—è–¥–æ–∫ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    active_agent_names = [name for name, active in active_agents.items() if active]
    
    if not active_agent_names:
        st.warning("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∫–ª—é—á–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ —Ä–∞–±–æ—Ç—ã
    cols = st.columns(len(active_agent_names))
    
    # –ò–∫–æ–Ω–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤
    icons = {
        "Planner": "üìù",
        "Architect": "üèóÔ∏è",
        "Coder": "üíª",
        "Reviewer": "üîç",
        "Tester": "üß™",
        "Documenter": "üìö"
    }
    
    # –û–ø–∏—Å–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤
    descriptions = {
        "Planner": "–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏",
        "Architect": "–ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Ä–µ—à–µ–Ω–∏—è",
        "Coder": "–ü–∏—à–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥",
        "Reviewer": "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –Ω–∞ –æ—à–∏–±–∫–∏",
        "Tester": "–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç—ã",
        "Documenter": "–ì–æ—Ç–æ–≤–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"
    }
    
    for i, agent_name in enumerate(active_agent_names):
        with cols[i]:
            st.markdown(f"**{i+1}. {agent_name}**")
            st.markdown(f"{icons.get(agent_name, 'ü§ñ')}")
            st.caption(descriptions.get(agent_name, ""))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–µ–ª–æ–∫ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ (CSS)
    if len(active_agent_names) > 1:
        st.markdown(
            """
            <style>
            .stHorizontalBlock > div {
                position: relative;
                text-align: center;
            }
            .stHorizontalBlock > div:not(:last-child)::after {
                content: "‚û°Ô∏è";
                position: absolute;
                top: 50%;
                right: -10px;
                transform: translateY(-50%);
                font-size: 20px;
                opacity: 0.7;
            }
            </style>
            """,
            unsafe_allow_html=True
        )




def render_agent_output(agent_name, output, elapsed_time=None, model=None, provider=None):
    """
    –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: –≤—ã–≤–æ–¥ –∞–≥–µ–Ω—Ç–∞ —Å –∏–Ω—Ñ–æ –æ –º–æ–¥–µ–ª–∏/–ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–¥-–±–ª–æ–∫–æ–≤.
    """
    icons = {
        "Planner": "üìù",
        "Architect": "üèóÔ∏è",
        "Coder": "üíª",
        "Reviewer": "üîç",
        "Tester": "üß™",
        "Documenter": "üìö"
    }
    icon = icons.get(agent_name, "ü§ñ")
    # –°–±–æ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    title = f"{icon} {agent_name}"
    details = []
    if elapsed_time is not None:
        details.append(f"‚è± {elapsed_time:.2f} —Å–µ–∫")
    if model:
        details.append(f"üß† –ú–æ–¥–µ–ª—å: `{model}`")
    if provider:
        details.append(f"üîå –ü—Ä–æ–≤–∞–π–¥–µ—Ä: `{provider}`")
    if details:
        title += " ‚Äî " + ", ".join(details)
    with st.expander(title, expanded=True):
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏/–ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        if model or provider:
            infostr = ""
            if model:
                infostr += f"**–ú–æ–¥–µ–ª—å:** `{model}`"
            if provider:
                infostr += f" _(–ø—Ä–æ–≤–∞–π–¥–µ—Ä: `{provider}`)_"
            if infostr:
                st.markdown(infostr)
        # –û—Å–Ω–æ–≤–Ω–æ–π –≤—ã–≤–æ–¥
        if agent_name == "Coder":
            # –ê–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–¥-–±–ª–æ–∫–∏, —á—Ç–æ–±—ã markdown –Ω–µ –ª–æ–º–∞–ª —Ñ–æ—Ä–º–∞—Ç
            import re
            code_pattern = re.compile(r"```([a-zA-Z0-9]*)\n(.*?)```", re.DOTALL)
            last_end = 0
            code_blocks = []
            for m in code_pattern.finditer(output):
                start, end = m.span()
                lang = m.group(1)
                code = m.group(2)
                if start > last_end:
                    st.markdown(output[last_end:start])
                st.code(code, language=lang if lang else None, line_numbers=True)
                last_end = end
            if last_end < len(output):
                st.markdown(output[last_end:])
        else:
            st.markdown(output)

def render_processing_animation():
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    """
    progress_text = "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."
    my_bar = st.progress(0, text=progress_text)
    
    for percent_complete in range(100):
        time.sleep(0.01)
        my_bar.progress(percent_complete + 1, text=f"{progress_text} {percent_complete+1}%")
    
    my_bar.empty()

def render_token_usage_chart(token_usage):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    
    Args:
        token_usage: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
    """
    if "per_agent" in token_usage and token_usage["per_agent"]:
        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        agent_data = pd.DataFrame({
            "–ê–≥–µ–Ω—Ç": list(token_usage["per_agent"].keys()),
            "–¢–æ–∫–µ–Ω—ã": list(token_usage["per_agent"].values())
        })
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        total = agent_data["–¢–æ–∫–µ–Ω—ã"].sum()
        agent_data["–ü—Ä–æ—Ü–µ–Ω—Ç"] = agent_data["–¢–æ–∫–µ–Ω—ã"] / total * 100
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig = px.bar(
            agent_data,
            x="–ê–≥–µ–Ω—Ç",
            y="–¢–æ–∫–µ–Ω—ã",
            text=agent_data["–ü—Ä–æ—Ü–µ–Ω—Ç"].apply(lambda x: f"{x:.1f}%"),
            color="–ê–≥–µ–Ω—Ç",
            title="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –∞–≥–µ–Ω—Ç–∞–º"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        fig.update_traces(textposition="outside")
        fig.update_layout(
            xaxis_title="–ê–≥–µ–Ω—Ç",
            yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤",
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –∞–≥–µ–Ω—Ç–∞–º")

def render_model_selector(models, provider_name, on_change=None):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    
    Args:
        models: –°–ª–æ–≤–∞—Ä—å —Å –º–æ–¥–µ–ª—è–º–∏ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ–º
        provider_name: –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ('claude', 'gpt')
        on_change: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–µ–π
    current_models = st.session_state.get("models", {})
    
    # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_model = list(models.keys())[0]
    if provider_name in current_models:
        default_model = current_models[provider_name]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
    selected_model = st.selectbox(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å {provider_name.capitalize()}:",
        options=list(models.keys()),
        format_func=lambda x: models.get(x, x),
        index=list(models.keys()).index(default_model) if default_model in models else 0,
        key=f"model_selector_{provider_name}",
        on_change=on_change if on_change else None
    )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if provider_name in current_models:
        current_models[provider_name] = selected_model
        st.session_state.models = current_models
    
    return selected_model

def render_workflow_selector(workflows, on_change=None):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    
    Args:
        workflows: –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞–±–æ—á–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ–º
        on_change: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    current_workflow = st.session_state.get("selected_workflow", "standard")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
    selected_workflow = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å:",
        options=list(workflows.keys()),
        format_func=lambda x: workflows.get(x, x),
        index=list(workflows.keys()).index(current_workflow) if current_workflow in workflows else 0,
        key="workflow_selector",
        on_change=on_change if on_change else None
    )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    st.session_state.selected_workflow = selected_workflow
    
    return selected_workflow

def render_status_indicator(status, text=None):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
    
    Args:
        status: –°—Ç–∞—Ç—É—Å ('success', 'warning', 'error', 'info')
        text: –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    icons = {
        "success": "‚úÖ",
        "warning": "‚ö†Ô∏è",
        "error": "‚ùå",
        "info": "‚ÑπÔ∏è",
        "loading": "üîÑ"
    }
    
    icon = icons.get(status, "‚ÑπÔ∏è")
    
    if text:
        st.markdown(f"{icon} {text}")
    else:
        st.markdown(icon)

def render_file_uploader(label, type, key, help=None):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UI
    
    Args:
        label: –ú–µ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        type: –¢–∏–ø —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ ('py', 'txt', 'json', –∏ —Ç.–¥.)
        key: –ö–ª—é—á –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        help: –¢–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ None
    """
    uploaded_file = st.file_uploader(
        label,
        type=type,
        key=key,
        help=help
    )
    
    if uploaded_file:
        file_details = {
            "–ò–º—è —Ñ–∞–π–ª–∞": uploaded_file.name,
            "–¢–∏–ø —Ñ–∞–π–ª–∞": uploaded_file.type,
            "–†–∞–∑–º–µ—Ä": f"{uploaded_file.size / 1024:.2f} KB"
        }
        
        with st.expander("üìÑ –î–µ—Ç–∞–ª–∏ —Ñ–∞–π–ª–∞", expanded=False):
            for key, value in file_details.items():
                st.write(f"**{key}:** {value}")
    
    return uploaded_file

def render_download_button(content, file_name, label="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", mime=None):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    
    Args:
        content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        file_name: –ò–º—è —Ñ–∞–π–ª–∞
        label: –ú–µ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        mime: MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    st.download_button(
        label=label,
        data=content,
        file_name=file_name,
        mime=mime
    )

def render_code_editor(code, language="python", height=300, key=None):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–æ–¥–∞
    
    Args:
        code: –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
        language: –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        height: –í—ã—Å–æ—Ç–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        key: –ö–ª—é—á –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        str: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    """
    return st.text_area(
        "–†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞",
        value=code,
        height=height,
        key=key or f"code_editor_{hash(code)}"
    )

def render_tabs_interface(tabs_content, default_tab=0):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
    
    Args:
        tabs_content: –°–ª–æ–≤–∞—Ä—å {–∏–º—è_–≤–∫–ª–∞–¥–∫–∏: —Ñ—É–Ω–∫—Ü–∏—è_–æ—Ç—Ä–∏—Å–æ–≤–∫–∏}
        default_tab: –ò–Ω–¥–µ–∫—Å –≤–∫–ª–∞–¥–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    tab_names = list(tabs_content.keys())
    tabs = st.tabs(tab_names)
    
    for i, (tab_name, render_func) in enumerate(tabs_content.items()):
        with tabs[i]:
            render_func()

def render_metrics_panel(metrics):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    
    Args:
        metrics: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ {–∏–º—è_–º–µ—Ç—Ä–∏–∫–∏: –∑–Ω–∞—á–µ–Ω–∏–µ, ...}
    """
    cols = st.columns(len(metrics))
    
    for i, (metric_name, metric_value) in enumerate(metrics.items()):
        with cols[i]:
            st.metric(
                label=metric_name,
                value=metric_value
            )

def render_agent_info(agent_name, description=None, capabilities=None):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≥–µ–Ω—Ç–µ
    
    Args:
        agent_name: –ò–º—è –∞–≥–µ–Ω—Ç–∞
        description: –û–ø–∏—Å–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        capabilities: –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞–≥–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    # –ò–∫–æ–Ω–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤
    icons = {
        "Planner": "üìù",
        "Architect": "üèóÔ∏è",
        "Coder": "üíª",
        "Reviewer": "üîç",
        "Tester": "üß™",
        "Documenter": "üìö"
    }
    
    icon = icons.get(agent_name, "ü§ñ")
    
    st.markdown(f"### {icon} {agent_name}")
    
    if description:
        st.markdown(description)
    
    if capabilities:
        st.markdown("**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**")
        for capability in capabilities:
            st.markdown(f"- {capability}")

def render_api_status(providers):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
    
    Args:
        providers: –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
    """
    st.subheader("üîå –°—Ç–∞—Ç—É—Å API")
    
    for provider_name, provider in providers.items():
        status = "success" if provider.is_configured() else "error"
        status_text = "–ù–∞—Å—Ç—Ä–æ–µ–Ω" if provider.is_configured() else "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        render_status_indicator(status, f"{provider_name.capitalize()}: {status_text}")
        
        if provider.is_configured():
            st.caption(f"–ú–æ–¥–µ–ª—å: {provider.model}")

def render_settings_form(orchestrator, on_save=None):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ–æ—Ä–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
    
    Args:
        orchestrator: –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        on_save: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    with st.form("settings_form"):
        # API –∫–ª—é—á–∏
        st.subheader("üîë API –ö–ª—é—á–∏")
        anthropic_key = st.text_input("API –∫–ª—é—á Anthropic (Claude):", type="password")
        openai_key = st.text_input("API –∫–ª—é—á OpenAI (GPT):", type="password")
        
        # –ú–æ–¥–µ–ª–∏
        st.subheader("üß† –ú–æ–¥–µ–ª–∏")
        claude_models = {
            "claude-3-opus-20240229": "Claude 3 Opus (–º–æ—â–Ω–∞—è, –º–µ–¥–ª–µ–Ω–Ω–∞—è)",
            "claude-3-7-sonnet-20250219": "Claude 3 Sonnet (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)",
            "claude-3-haiku-20240307": "Claude 3 Haiku (–±—ã—Å—Ç—Ä–∞—è, —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è)",
            "claude-3-7-sonnet-20250219": "Claude 3.7 Sonnet (–Ω–æ–≤–µ–π—à–∞—è –≤–µ—Ä—Å–∏—è)"
        }
        
        gpt_models = {
            "gpt-4-turbo-preview": "GPT-4 Turbo (–º–æ—â–Ω–∞—è, –º–µ–¥–ª–µ–Ω–Ω–∞—è)",
            "gpt-4": "GPT-4 (–ø—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è)",
            "gpt-3.5-turbo": "GPT-3.5 Turbo (–±—ã—Å—Ç—Ä–∞—è, —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è)"
        }
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–µ–π
        models = st.session_state.get("models", {
            "claude": "claude-3-7-sonnet-20250219", 
            "gpt": "gpt-4-turbo-preview"
        })
        
        selected_claude = st.selectbox(
            "–ú–æ–¥–µ–ª—å Claude:",
            options=list(claude_models.keys()),
            format_func=lambda x: claude_models.get(x, x),
            index=list(claude_models.keys()).index(
                models.get("claude", "claude-3-7-sonnet-20250219")
            ) if models.get("claude", "claude-3-7-sonnet-20250219") in claude_models else 1
        )
        
        selected_gpt = st.selectbox(
            "–ú–æ–¥–µ–ª—å GPT:",
            options=list(gpt_models.keys()),
            format_func=lambda x: gpt_models.get(x, x),
            index=list(gpt_models.keys()).index(models.get("gpt", "gpt-4-turbo-preview")) if models.get("gpt") in gpt_models else 0
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
        st.subheader("üí∞ –¢–æ–∫–µ–Ω—ã")
        token_limits = st.session_state.get("token_limits", {"max_per_request": 4000})
        max_tokens_per_request = st.slider(
            "–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å:", 
            100, 8000, 
            token_limits.get("max_per_request", 4000), 
            100
        )
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        submitted = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        if submitted:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–π
            if anthropic_key:
                orchestrator.set_provider_key("claude", anthropic_key)
            if openai_key:
                orchestrator.set_provider_key("gpt", openai_key)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
            st.session_state.models = {
                "claude": selected_claude,
                "gpt": selected_gpt
            }
            
            for provider_name, model_name in st.session_state.models.items():
                if provider_name in orchestrator.providers:
                    orchestrator.providers[provider_name].set_model(model_name)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
            st.session_state.token_limits = {
                "max_per_request": max_tokens_per_request
            }
            
            st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            
            if on_save:
                on_save()
# --- –ù–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–æ —Ö–æ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ ---
def render_agent_workflow_progress(orchestrator):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ orchestrator.
    Args:
        orchestrator: –æ–±—ä–µ–∫—Ç-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –º–µ—Ç–æ–¥ get_agent_statuses()
    """
    import streamlit as st
    from datetime import timedelta
    agent_statuses = orchestrator.get_agent_statuses() if orchestrator else []
    if not agent_statuses:
        st.info("–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    icons = {
        "Planner": "üìù",
        "Architect": "üèóÔ∏è",
        "Coder": "üíª",
        "Reviewer": "üîç",
        "Tester": "üß™",
        "Documenter": "üìö"
    }
    status_icons = {
        "pending": "‚è≥",
        "running": "üîÑ",
        "done": "‚úÖ",
        "error": "‚ùå"
    }
    cols = st.columns(len(agent_statuses))
    for i, agent in enumerate(agent_statuses):
        name = agent.get("name", f"–ê–≥–µ–Ω—Ç {i+1}")
        status = agent.get("status", "pending")
        elapsed = agent.get("elapsed_time")
        icon = icons.get(name, "ü§ñ")
        status_icon = status_icons.get(status, "‚è≥")
        with cols[i]:
            st.markdown(f"**{icon} {name}**")
            st.markdown(f"{status_icon} {status.capitalize()}")
            if elapsed is not None:
                st.caption(f"‚è± {elapsed:.2f} —Å–µ–∫")