"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit
"""

import streamlit as st
import datetime
import time

def render_sidebar(orchestrator=None):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    
    Args:
        orchestrator: –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
        with st.expander("üîë API –ö–ª—é—á–∏", expanded=True):
            anthropic_key = st.text_input("API –∫–ª—é—á Anthropic (Claude):", type="password")
            openai_key = st.text_input("API –∫–ª—é—á OpenAI (GPT):", type="password")
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π
            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á–∏"):
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–π –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
                if orchestrator:
                    if anthropic_key:
                        orchestrator.set_provider_key("claude", anthropic_key)
                    if openai_key:
                        orchestrator.set_provider_key("gpt", openai_key)
                
                st.success("–ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
        with st.expander("ü§ñ –ê–≥–µ–Ω—Ç—ã", expanded=True):
            st.write("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
            
            agents = {
                "Planner": "üìù –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω",
                "Architect": "üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä - –ø—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ—à–µ–Ω–∏—è",
                "Coder": "üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç - –ø–∏—à–µ—Ç –∫–æ–¥",
                "Reviewer": "üîç –†–µ–≤—å—é–µ—Ä - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –Ω–∞ –æ—à–∏–±–∫–∏",
                "Tester": "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ - —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç—ã",
                "Documenter": "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä - –ø–∏—à–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"
            }
            
            active_agents = {}
            for agent_key, agent_desc in agents.items():
                active_agents[agent_key] = st.checkbox(agent_desc, value=True, key=f"agent_{agent_key}")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ session_state
            if "active_agents" not in st.session_state:
                st.session_state.active_agents = active_agents
            else:
                st.session_state.active_agents = active_agents
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
            if orchestrator:
                orchestrator.configure_agents(active_agents)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π
        with st.expander("üß† –ú–æ–¥–µ–ª–∏", expanded=False):
            claude_models = {
                "claude-3-opus-20240229": "Claude 3 Opus (–º–æ—â–Ω–∞—è, –º–µ–¥–ª–µ–Ω–Ω–∞—è)",
                "claude-3-sonnet-20240229": "Claude 3 Sonnet (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)",
                "claude-3-haiku-20240307": "Claude 3 Haiku (–±—ã—Å—Ç—Ä–∞—è, —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è)"
            }
            
            gpt_models = {
                "gpt-4-turbo": "GPT-4 Turbo (–º–æ—â–Ω–∞—è, –º–µ–¥–ª–µ–Ω–Ω–∞—è)",
                "gpt-4": "GPT-4 (–ø—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è)",
                "gpt-3.5-turbo": "GPT-3.5 Turbo (–±—ã—Å—Ç—Ä–∞—è, —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è)"
            }
            
            st.write("–ú–æ–¥–µ–ª—å Claude:")
            selected_claude = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Claude:",
                options=list(claude_models.keys()),
                format_func=lambda x: claude_models.get(x, x),
                index=1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Claude 3 Sonnet
            )
            
            st.write("–ú–æ–¥–µ–ª—å GPT:")
            selected_gpt = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å GPT:",
                options=list(gpt_models.keys()),
                format_func=lambda x: gpt_models.get(x, x),
                index=0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é GPT-4 Turbo
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ session_state
            if "models" not in st.session_state:
                st.session_state.models = {
                    "claude": selected_claude,
                    "gpt": selected_gpt
                }
            else:
                st.session_state.models = {
                    "claude": selected_claude,
                    "gpt": selected_gpt
                }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
        with st.expander("üí∞ –¢–æ–∫–µ–Ω—ã –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å", expanded=False):
            if orchestrator:
                usage = orchestrator.get_token_usage()
                st.metric("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤", usage["total"])
                st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å ($)", usage["cost"])
            else:
                st.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
            
            st.write("–õ–∏–º–∏—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤:")
            max_tokens_per_request = st.slider("–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å:", 100, 8000, 4000, 100)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ session_state
            if "token_limits" not in st.session_state:
                st.session_state.token_limits = {
                    "max_per_request": max_tokens_per_request
                }
            else:
                st.session_state.token_limits = {
                    "max_per_request": max_tokens_per_request
                }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
        with st.expander("üìä –û —Å–∏—Å—Ç–µ–º–µ", expanded=False):
            st.write("**–í–µ—Ä—Å–∏—è:** 0.1.0")
            st.write("**–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏:** –ê–ø—Ä–µ–ª—å 2025")
            st.write("**–°–æ—Å—Ç–æ—è–Ω–∏–µ:** –ü—Ä–æ—Ç–æ—Ç–∏–ø")
            
            # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
            st.write(f"**–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:** {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
            try:
                import platform
                system_info = platform.uname()
                st.write(f"**–°–µ—Ä–≤–µ—Ä:** {system_info.node}")
                st.write(f"**–û–°:** {system_info.system} {system_info.release}")
            except:
                pass

def render_chat_history(messages):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    
    Args:
        messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    if not messages:
        st.info("–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∑–∞–ø—Ä–æ—Å.")
        return
    
    for message in messages:
        role = message.get("role", "unknown")
        content = message.get("content", "")
        
        with st.chat_message(role):
            st.write(content)

def render_agent_workflow(active_agents):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
    
    Args:
        active_agents: –°–ª–æ–≤–∞—Ä—å —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
    """
    st.subheader("üîÑ –ü–æ—Ä—è–¥–æ–∫ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    active_agent_names = [name for name, active in active_agents.items() if active]
    
    if not active_agent_names:
        st.warning("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∫–ª—é—á–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ —Ä–∞–±–æ—Ç—ã
    cols = st.columns(len(active_agent_names))
    
    for i, agent_name in enumerate(active_agent_names):
        with cols[i]:
            st.write(f"**{i+1}. {agent_name}**")
            
            # –ò–∫–æ–Ω–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤
            icons = {
                "Planner": "üìù",
                "Architect": "üèóÔ∏è",
                "Coder": "üíª",
                "Reviewer": "üîç",
                "Tester": "üß™",
                "Documenter": "üìö"
            }
            
            st.write(icons.get(agent_name, "ü§ñ"))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–æ–∫ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
    if len(active_agent_names) > 1:
        st.markdown(
            """
            <style>
            .stHorizontalBlock {
                position: relative;
            }
            .stHorizontalBlock:after {
                content: "";
                position: absolute;
                top: 50%;
                left: 0;
                right: 0;
                height: 2px;
                background: #ccc;
                z-index: -1;
            }
            </style>
            """,
            unsafe_allow_html=True
        )

def render_agent_output(agent_name, output, elapsed_time=None):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—ã–≤–æ–¥–∞ –æ—Ç –∞–≥–µ–Ω—Ç–∞
    
    Args:
        agent_name: –ò–º—è –∞–≥–µ–Ω—Ç–∞
        output: –¢–µ–∫—Å—Ç –≤—ã–≤–æ–¥–∞
        elapsed_time: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    # –ò–∫–æ–Ω–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤
    icons = {
        "Planner": "üìù",
        "Architect": "üèóÔ∏è",
        "Coder": "üíª",
        "Reviewer": "üîç",
        "Tester": "üß™",
        "Documenter": "üìö"
    }
    
    icon = icons.get(agent_name, "ü§ñ")
    
    with st.expander(f"{icon} {agent_name}" + (f" ({elapsed_time:.2f} —Å–µ–∫)" if elapsed_time else ""), expanded=True):
        st.write(output)

def render_processing_animation():
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    """
    progress_text = "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."
    my_bar = st.progress(0, text=progress_text)
    
    for percent_complete in range(100):
        time.sleep(0.01)
        my_bar.progress(percent_complete + 1, text=f"{progress_text} {percent_complete+1}%")
    
    my_bar.empty()