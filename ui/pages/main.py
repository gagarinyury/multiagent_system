"""
–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit
"""

import streamlit as st
import time
from ui.components import (
    render_sidebar, render_chat_history, 
    render_agent_workflow, render_agent_output
)

def render_main_page(orchestrator, workflow_manager):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    Args:
        orchestrator: –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        workflow_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    """
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.title("ü§ñ –ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
    if "active_agents" in st.session_state:
        render_agent_workflow(st.session_state.active_agents)
    
    # –ß–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π
    st.subheader("üí¨ –î–∏–∞–ª–æ–≥ —Å —Å–∏—Å—Ç–µ–º–æ–π")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    if "messages" in st.session_state:
        render_chat_history(st.session_state.messages)
    
    # –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_input = st.text_area("–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å:", height=100)
    
    # –í—ã–±–æ—Ä —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    workflow_options = {
        "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å",
        "code_only": "–¢–æ–ª—å–∫–æ –∫–æ–¥",
        "review_only": "–¢–æ–ª—å–∫–æ —Ä–µ–≤—å—é",
        "docs_only": "–¢–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
    }
    selected_workflow = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å:",
        options=list(workflow_options.keys()),
        format_func=lambda x: workflow_options.get(x, x)
    )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    if selected_workflow:
        workflow_info = workflow_manager.get_workflow_info(selected_workflow)
        st.info(f"**{workflow_info.get('name', '')}**: {workflow_info.get('description', '')}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å"):
        if not user_input:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å!")
        else:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            if "messages" not in st.session_state:
                st.session_state.messages = []
            
            st.session_state.messages.append({"role": "user", "content": user_input})
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            with st.chat_message("user"):
                st.write(user_input)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö API –∫–ª—é—á–µ–π
                providers_configured = False
                for provider in st.session_state.providers.values():
                    if provider.is_configured():
                        providers_configured = True
                        break
                
                if not providers_configured:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω API –∫–ª—é—á –≤ —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫!")
                else:
                    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
                    start_time = time.time()
                    results = workflow_manager.execute_workflow(selected_workflow, user_input)
                    total_time = time.time() - start_time
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
                    st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤")
                    for agent_name, agent_result in results.items():
                        if "result" in agent_result:
                            render_agent_output(
                                agent_name, 
                                agent_result["result"], 
                                agent_result.get("elapsed_time")
                            )
                    
                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    final_result = orchestrator._combine_results(results)
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                    st.session_state.messages.append({
                        "role": "assistant", 
                        "content": final_result,
                        "tokens": sum(r.get("tokens", 0) for r in results.values() if isinstance(r, dict))
                    })
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    with st.chat_message("assistant"):
                        st.write(final_result)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    st.info(f"–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –≤ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–º—Å—è –±–ª–æ–∫–µ
    with st.expander("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"):
        st.write("**–í–µ—Ä—Å–∏—è:** 0.1.0")
        st.write("**–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏:** –ê–ø—Ä–µ–ª—å 2025")
        st.write("**–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** –ö–æ–º–∞–Ω–¥–∞ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        if orchestrator:
            token_usage = orchestrator.get_token_usage()
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤", token_usage["total"])
            with col2:
                st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å ($)", token_usage["cost"])
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –∞–≥–µ–Ω—Ç–∞–º
            if "per_agent" in token_usage and token_usage["per_agent"]:
                st.subheader("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ –∞–≥–µ–Ω—Ç–∞–º")
                for agent, tokens in token_usage["per_agent"].items():
                    st.write(f"**{agent}:** {tokens} —Ç–æ–∫–µ–Ω–æ–≤")

if __name__ == "__main__":
    # –î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–ø—Ä—è–º—É—é
    st.info("–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")