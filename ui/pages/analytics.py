"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import datetime

def render_analytics_page(orchestrator, context_storage=None):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    
    Args:
        orchestrator: –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        context_storage: –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    token_usage = orchestrator.get_token_usage()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    st.header("üí° –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric(
            "–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤",
            f"{token_usage['total']:,}",
            delta=None
        )
    
    with col2:
        st.metric(
            "–°—Ç–æ–∏–º–æ—Å—Ç—å",
            f"${token_usage['cost']:.2f}",
            delta=None
        )
    
    with col3:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤
        dialogs_count = len(st.session_state.get("messages", [])) // 2
        st.metric(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤",
            dialogs_count,
            delta=None
        )
    
    # –ì—Ä–∞—Ñ–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    st.header("üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –ü–æ –∞–≥–µ–Ω—Ç–∞–º
    st.subheader("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ –∞–≥–µ–Ω—Ç–∞–º")
    
    if "per_agent" in token_usage and token_usage["per_agent"]:
        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        agent_data = pd.DataFrame({
            "–ê–≥–µ–Ω—Ç": list(token_usage["per_agent"].keys()),
            "–¢–æ–∫–µ–Ω—ã": list(token_usage["per_agent"].values())
        })
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        total = agent_data["–¢–æ–∫–µ–Ω—ã"].sum()
        agent_data["–ü—Ä–æ—Ü–µ–Ω—Ç"] = agent_data["–¢–æ–∫–µ–Ω—ã"] / total * 100
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig = px.bar(
            agent_data,
            x="–ê–≥–µ–Ω—Ç",
            y="–¢–æ–∫–µ–Ω—ã",
            text=agent_data["–ü—Ä–æ—Ü–µ–Ω—Ç"].apply(lambda x: f"{x:.1f}%"),
            color="–ê–≥–µ–Ω—Ç",
            title="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –∞–≥–µ–Ω—Ç–∞–º"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        fig.update_traces(textposition="outside")
        fig.update_layout(
            xaxis_title="–ê–≥–µ–Ω—Ç",
            yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤",
            height=500
        )
        
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –∞–≥–µ–Ω—Ç–∞–º")
    
    # –ü–æ –º–æ–¥–µ–ª—è–º
    st.subheader("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ –º–æ–¥–µ–ª—è–º")
    
    if "per_model" in token_usage and token_usage["per_model"]:
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        models = list(token_usage["per_model"].keys())
        input_tokens = [token_usage["per_model"][model].get("input", 0) for model in models]
        output_tokens = [token_usage["per_model"][model].get("output", 0) for model in models]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
        model_data = pd.DataFrame({
            "–ú–æ–¥–µ–ª—å": models,
            "–í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã": input_tokens,
            "–í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã": output_tokens
        })
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è plotly
        model_data_melted = pd.melt(
            model_data,
            id_vars=["–ú–æ–¥–µ–ª—å"],
            value_vars=["–í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã", "–í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã"],
            var_name="–¢–∏–ø —Ç–æ–∫–µ–Ω–æ–≤",
            value_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
        )
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig = px.bar(
            model_data_melted,
            x="–ú–æ–¥–µ–ª—å",
            y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            color="–¢–∏–ø —Ç–æ–∫–µ–Ω–æ–≤",
            barmode="group",
            title="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –º–æ–¥–µ–ª—è–º"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        fig.update_layout(
            xaxis_title="–ú–æ–¥–µ–ª—å",
            yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤",
            height=500
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –º–æ–¥–µ–ª—è–º")
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        model_costs = {}
        for model in models:
            input_cost = token_usage["per_model"][model].get("input", 0) / 1000 * 0.01  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            output_cost = token_usage["per_model"][model].get("output", 0) / 1000 * 0.03  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            model_costs[model] = input_cost + output_cost
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        detail_data = pd.DataFrame({
            "–ú–æ–¥–µ–ª—å": models,
            "–í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã": input_tokens,
            "–í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã": output_tokens,
            "–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤": [i + o for i, o in zip(input_tokens, output_tokens)],
            "–°—Ç–æ–∏–º–æ—Å—Ç—å ($)": [model_costs[model] for model in models]
        })
        
        st.dataframe(detail_data, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –º–æ–¥–µ–ª—è–º")
    
    # –ò—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
    if context_storage:
        st.header("üìú –ò—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
            recent_interactions = context_storage.get_recent_interactions(10)
            
            if recent_interactions:
                # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
                interactions_data = pd.DataFrame({
                    "–î–∞—Ç–∞": [datetime.datetime.fromisoformat(i["timestamp"]) for i in recent_interactions],
                    "–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": [i["user_input"][:50] + "..." if len(i["user_input"]) > 50 else i["user_input"] for i in recent_interactions],
                    "–¢–æ–∫–µ–Ω—ã": [i["tokens_used"] for i in recent_interactions]
                })
                
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
                interactions_data = interactions_data.sort_values("–î–∞—Ç–∞", ascending=True)
                
                # –ì—Ä–∞—Ñ–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                fig = px.line(
                    interactions_data,
                    x="–î–∞—Ç–∞",
                    y="–¢–æ–∫–µ–Ω—ã",
                    markers=True,
                    title="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"
                )
                
                fig.update_layout(
                    xaxis_title="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è",
                    yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤",
                    height=400
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # –¢–∞–±–ª–∏—Ü–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
                st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã")
                st.dataframe(interactions_data, use_container_width=True)
            else:
                st.info("–ò—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø—É—Å—Ç–∞")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {str(e)}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    with st.expander("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"):
        st.markdown("""
        ### –°—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
        
        –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤:
        
        | –ú–æ–¥–µ–ª—å | –í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã | –í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã |
        |--------|----------------|-----------------|
        | Claude 3 Opus | $0.015 | $0.075 |
        | Claude 3 Sonnet | $0.003 | $0.015 |
        | Claude 3 Haiku | $0.0003 | $0.0015 |
        | GPT-4 Turbo | $0.01 | $0.03 |
        | GPT-4 | $0.03 | $0.06 |
        | GPT-3.5 Turbo | $0.0005 | $0.0015 |
        
        –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω API.
        """)

if __name__ == "__main__":
    # –î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–ø—Ä—è–º—É—é
    st.info("–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")