"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit
"""

import streamlit as st
import os
from dotenv import load_dotenv, set_key

def render_settings_page(orchestrator):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
    
    Args:
        orchestrator: –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –°–µ–∫—Ü–∏—è API –∫–ª—é—á–µ–π
    st.header("üîë API –∫–ª—é—á–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Anthropic Claude")
        claude_key = st.text_input(
            "API –∫–ª—é—á Anthropic:",
            value=os.getenv("ANTHROPIC_API_KEY", ""),
            type="password"
        )
        
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á Claude"):
            if claude_key:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                try:
                    set_key(".env", "ANTHROPIC_API_KEY", claude_key)
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–µ
                    orchestrator.set_provider_key("claude", claude_key)
                    st.success("‚úÖ –ö–ª—é—á Claude —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª—é—á–∞: {str(e)}")
            else:
                st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á")
    
    with col2:
        st.subheader("OpenAI GPT")
        openai_key = st.text_input(
            "API –∫–ª—é—á OpenAI:",
            value=os.getenv("OPENAI_API_KEY", ""),
            type="password"
        )
        
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á OpenAI"):
            if openai_key:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                try:
                    set_key(".env", "OPENAI_API_KEY", openai_key)
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–µ
                    orchestrator.set_provider_key("gpt", openai_key)
                    st.success("‚úÖ –ö–ª—é—á OpenAI —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª—é—á–∞: {str(e)}")
            else:
                st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á")
    
    st.divider()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π
    st.header("üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π")
    
    col1, col2 = st.columns(2)
    
    with col1:
        claude_models = {
            "claude-3-opus-20240229": "Claude 3 Opus (–º–æ—â–Ω–∞—è, –º–µ–¥–ª–µ–Ω–Ω–∞—è)",
            "claude-3-sonnet-20240229": "Claude 3 Sonnet (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)",
            "claude-3-haiku-20240307": "Claude 3 Haiku (–±—ã—Å—Ç—Ä–∞—è, —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è)",
            "claude-3.5-sonnet-20240425": "Claude 3.5 Sonnet (–Ω–æ–≤–µ–π—à–∞—è)"
        }
        
        selected_claude = st.selectbox(
            "–ú–æ–¥–µ–ª—å Claude:",
            options=list(claude_models.keys()),
            format_func=lambda x: claude_models.get(x, x),
            index=list(claude_models.keys()).index(
                os.getenv("DEFAULT_CLAUDE_MODEL", "claude-3-sonnet-20240229")
            ) if os.getenv("DEFAULT_CLAUDE_MODEL") in claude_models else 1
        )
        
        if st.button("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å Claude"):
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            try:
                set_key(".env", "DEFAULT_CLAUDE_MODEL", selected_claude)
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–µ
                orchestrator.set_provider_model("claude", selected_claude)
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ session_state
                if "models" in st.session_state:
                    st.session_state.models["claude"] = selected_claude
                st.success(f"‚úÖ –ú–æ–¥–µ–ª—å Claude —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {selected_claude}")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–¥–µ–ª–∏: {str(e)}")
    
    with col2:
        gpt_models = {
            "gpt-4-turbo": "GPT-4 Turbo (–º–æ—â–Ω–∞—è, –º–µ–¥–ª–µ–Ω–Ω–∞—è)",
            "gpt-4": "GPT-4 (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)",
            "gpt-3.5-turbo": "GPT-3.5 Turbo (–±—ã—Å—Ç—Ä–∞—è, —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è)"
        }
        
        selected_gpt = st.selectbox(
            "–ú–æ–¥–µ–ª—å GPT:",
            options=list(gpt_models.keys()),
            format_func=lambda x: gpt_models.get(x, x),
            index=list(gpt_models.keys()).index(
                os.getenv("DEFAULT_GPT_MODEL", "gpt-4-turbo")
            ) if os.getenv("DEFAULT_GPT_MODEL") in gpt_models else 0
        )
        
        if st.button("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å GPT"):
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            try:
                set_key(".env", "DEFAULT_GPT_MODEL", selected_gpt)
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–µ
                orchestrator.set_provider_model("gpt", selected_gpt)
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ session_state
                if "models" in st.session_state:
                    st.session_state.models["gpt"] = selected_gpt
                st.success(f"‚úÖ –ú–æ–¥–µ–ª—å GPT —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {selected_gpt}")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–¥–µ–ª–∏: {str(e)}")
    
    st.divider()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
    st.header("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤")
    
    st.write("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ:")
    
    agents = {
        "Planner": "üìù –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω",
        "Architect": "üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä - –ø—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ—à–µ–Ω–∏—è",
        "Coder": "üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç - –ø–∏—à–µ—Ç –∫–æ–¥",
        "Reviewer": "üîç –†–µ–≤—å—é–µ—Ä - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –Ω–∞ –æ—à–∏–±–∫–∏",
        "Tester": "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ - —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç—ã",
        "Documenter": "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ç–æ—Ä - –ø–∏—à–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"
    }
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    active_agents = st.session_state.get("active_agents", {})
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–¥–∞
    col1, col2 = st.columns(2)
    
    for i, (agent_key, agent_desc) in enumerate(agents.items()):
        with col1 if i < 3 else col2:
            active_agents[agent_key] = st.checkbox(
                agent_desc, 
                value=active_agents.get(agent_key, True),
                key=f"settings_agent_{agent_key}"
            )
    
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤"):
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ session_state
        st.session_state.active_agents = active_agents
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        orchestrator.configure_agents(active_agents)
        st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    st.divider()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
    st.header("üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤")
    
    st.write("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    token_limits = st.session_state.get("token_limits", {"max_per_request": 4000})
    
    max_tokens = st.slider(
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å:", 
        min_value=1000, 
        max_value=8000, 
        value=token_limits.get("max_per_request", 4000),
        step=500
    )
    
    cache_enabled = st.checkbox(
        "–í–∫–ª—é—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤", 
        value=os.getenv("ENABLE_CACHE", "true").lower() == "true"
    )
    
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤"):
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ session_state
        st.session_state.token_limits = {
            "max_per_request": max_tokens
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        try:
            set_key(".env", "ENABLE_CACHE", str(cache_enabled).lower())
            set_key(".env", "MAX_TOKENS_PER_REQUEST", str(max_tokens))
            st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
    
    st.divider()
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    st.header("üõ†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"):
        log_levels = ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
        current_log_level = os.getenv("LOG_LEVEL", "INFO")
        
        selected_log_level = st.selectbox(
            "–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:",
            options=log_levels,
            index=log_levels.index(current_log_level) if current_log_level in log_levels else 1
        )
        
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"):
            try:
                set_key(".env", "LOG_LEVEL", selected_log_level)
                st.success(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {selected_log_level}")
                st.info("‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
    
    with st.expander("–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"):
        st.warning("‚ö†Ô∏è –≠—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!")
        
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"):
            try:
                st.session_state.messages = []
                st.success("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
        
        if st.button("–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤"):
            try:
                if "orchestrator" in st.session_state:
                    st.session_state.orchestrator.token_usage = {
                        "total": 0,
                        "per_model": {},
                        "per_agent": {}
                    }
                st.success("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å–±—Ä–æ—à–µ–Ω–∞!")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

if __name__ == "__main__":
    # –î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–ø—Ä—è–º—É—é
    st.info("–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")