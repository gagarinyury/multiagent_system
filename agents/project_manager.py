"""
–ê–≥–µ–Ω—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ - —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ
"""

from .base_agent import BaseAgent
import logging
import re
import os
import json
from pathlib import Path

logger = logging.getLogger("multiagent_system")

class ProjectManagerAgent(BaseAgent):
    """
    –ê–≥–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ
    """
    def __init__(self, provider=None, project_manager=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤

        Args:
            provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM API
            project_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä SecureProjectManager
        """
        super().__init__("ProjectManager", provider)
        self.project_manager = project_manager

    def process(self, input_text, context=None):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞

        Args:
            input_text: –ö–æ–¥ –æ—Ç CoderAgent (–∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞)
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
                context –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
                - 'project_name': –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞
                - 'project_path': –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                - 'create_structure': —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)

        Returns:
            str: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        logger.info("ProjectManagerAgent: –ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞.")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if not self.project_manager:
            error_message = "–û—à–∏–±–∫–∞: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞–≥–µ–Ω—Ç–∞ ProjectManager"
            logger.error(error_message)
            return error_message

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        project_settings = self._extract_project_settings(context)
        project_name = project_settings.get("project_name")
        
        if not project_name:
            # –ï—Å–ª–∏ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —Å–æ–∑–¥–∞–µ–º –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            from datetime import datetime
            project_name = f"project_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            logger.info(f"ProjectManagerAgent: –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {project_name}")
            project_settings["project_name"] = project_name

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        logger.info(f"ProjectManagerAgent: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}'")
        try:
            file_blocks = self.extract_file_blocks(input_text)
            if not file_blocks:
                warning_message = "ProjectManagerAgent: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ñ–∞–π–ª—ã –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞."
                logger.warning(warning_message)
                # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ –∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é - –∏—â–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ –º–µ–∂–¥—É ```
                file_blocks = self._extract_code_blocks_alternative(input_text)
                if not file_blocks:
                    return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ñ–∞–π–ª—ã –∏–∑ –∫–æ–¥–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤."
            logger.info(f"ProjectManagerAgent: –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(file_blocks)} —Ñ–∞–π–ª–æ–≤.")
        except Exception as e:
            error_message = f"ProjectManagerAgent: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}"
            logger.error(error_message, exc_info=True)
            return f"[Error] {error_message}"

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        logger.info(f"ProjectManagerAgent: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}'")
        try:
            create_result = self.project_manager.create_project(project_name)
            if not create_result["success"]:
                error_message = f"ProjectManagerAgent: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {create_result['message']}"
                logger.error(error_message)
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º, –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                existing_projects = self.project_manager.list_projects()
                if project_name in existing_projects:
                    logger.info(f"ProjectManagerAgent: –ü—Ä–æ–µ–∫—Ç '{project_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –Ω–∏–º.")
                else:
                    return f"[Error] {error_message}"
            else:
                logger.info(f"ProjectManagerAgent: –ü—Ä–æ–µ–∫—Ç '{project_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
        except Exception as e:
            error_message = f"ProjectManagerAgent: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}"
            logger.error(error_message, exc_info=True)
            return f"[Error] {error_message}"

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if project_settings.get("create_structure", True):
            logger.info(f"ProjectManagerAgent: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}'")
            self._create_standard_structure(project_name, file_blocks)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        created_files = []
        errors = []

        for file_path, content in file_blocks.items():
            logger.info(f"ProjectManagerAgent: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ '{file_path}' –≤ –ø—Ä–æ–µ–∫—Ç–µ '{project_name}'")
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ñ–∞–π–ª–∞, –∏ —Å–æ–∑–¥–∞–µ–º –µ—ë –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                file_dir = os.path.dirname(file_path)
                if file_dir and not self._directory_exists(project_name, file_dir):
                    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    self._create_directory_with_parents(project_name, file_dir)
                
                result = self.project_manager.create_file(project_name, file_path, content)
                if result["success"]:
                    created_files.append(file_path)
                    logger.info(f"ProjectManagerAgent: –§–∞–π–ª '{file_path}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
                else:
                    errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{file_path}': {result['message']}")
                    logger.error(f"ProjectManagerAgent: {errors[-1]}")
            except Exception as e:
                error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{file_path}': {str(e)}"
                errors.append(error_msg)
                logger.error(f"ProjectManagerAgent: {error_msg}", exc_info=True)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ README.md —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if "README.md" not in file_blocks and "readme.md" not in file_blocks:
            self._create_readme(project_name, project_settings, created_files)

        # –°–æ–∑–¥–∞–Ω–∏–µ .gitignore, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if ".gitignore" not in file_blocks:
            self._create_gitignore(project_name)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        success_count = len(created_files)
        error_count = len(errors)
        
        report = f"""## üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}'

### üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
- –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {success_count}
- –û—à–∏–±–æ–∫: {error_count}
- –ü—Ä–æ–µ–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø—É—Ç–∏: `{self.project_manager.projects_root}/{project_name}`

### üìã –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:
"""
        if created_files:
            for file_path in created_files:
                report += f"- `{file_path}`\n"
        else:
            report += "- *–§–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã*\n"

        if errors:
            report += "\n### ‚ö†Ô∏è –û—à–∏–±–∫–∏:\n"
            for error in errors:
                report += f"- {error}\n"

        report += f"\n### üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤.
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `cd {self.project_manager.projects_root}/{project_name}` –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª.
3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: `git init`
"

        logger.info("ProjectManagerAgent: –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return report

    def _extract_project_settings(self, context):
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
        """
        logger.debug("ProjectManagerAgent: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_settings = {
            "project_name": None,
            "project_description": "",
            "create_structure": True,
            "author": "MultiAgent System",
            "version": "0.1.0",
            "license": "MIT"
        }
        
        if not context:
            return default_settings
        
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç - —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ –Ω–µ–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞
        if isinstance(context, str):
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞
            project_name_patterns = [
                r"–ø—Ä–æ–µ–∫—Ç:\s*([^,\n]+)", 
                r"project:\s*([^,\n]+)",
                r"–Ω–∞–∑–≤–∞–Ω–∏–µ\s+–ø—Ä–æ–µ–∫—Ç–∞:\s*([^,\n]+)",
                r"project\s+name:\s*([^,\n]+)"
            ]
            
            for pattern in project_name_patterns:
                match = re.search(pattern, context, re.IGNORECASE)
                if match:
                    default_settings["project_name"] = match.group(1).strip()
                    break
            
            # –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            description_patterns = [
                r"–æ–ø–∏—Å–∞–Ω–∏–µ:\s*([^\n]+)",
                r"description:\s*([^\n]+)"
            ]
            
            for pattern in description_patterns:
                match = re.search(pattern, context, re.IGNORECASE)
                if match:
                    default_settings["project_description"] = match.group(1).strip()
                    break
                    
            return default_settings

        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç - —Å–ª–æ–≤–∞—Ä—å, –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if isinstance(context, dict):
            # –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å project_settings, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if "project_settings" in context:
                project_settings = context["project_settings"]
                if isinstance(project_settings, dict):
                    for key in default_settings.keys():
                        if key in project_settings:
                            default_settings[key] = project_settings[key]
            else:
                # –ò–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏ –ø—Ä—è–º–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                for key in default_settings.keys():
                    if key in context:
                        default_settings[key] = context[key]
                
        return default_settings

    def extract_file_blocks(self, code_text):
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤.
        –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ CoderAgent.
        """
        logger.info("ProjectManagerAgent: –ù–∞—á–∞—Ç–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤.")
        file_blocks = {}
        lines = code_text.split('\n')

        current_file = None
        current_code = []
        in_code_block = False
        code_block_language = None

        for line in lines:
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –±–ª–æ–∫–æ–º –∫–æ–¥–∞
            if not in_code_block and '`' not in line:
                file_indicators = ['—Ñ–∞–π–ª:', 'file:', 'module:', '–º–æ–¥—É–ª—å:', '–ø—É—Ç—å:', 'path:']
                for indicator in file_indicators:
                    if indicator in line.lower():
                        parts = line.split(indicator, 1)
                        if len(parts) > 1:
                            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è —Ñ–∞–π–ª–∞, –æ—á–∏—â–∞—è –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                            potential_file = parts[1].strip().strip('`"\' \t:')
                            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ—Ö–æ–∂–µ –ª–∏ —ç—Ç–æ –Ω–∞ –∏–º—è —Ñ–∞–π–ª–∞ (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–∫—É –∏–ª–∏ —Å–ª—ç—à)
                            if '.' in potential_file or '/' in potential_file or '\\' in potential_file:
                                current_file = potential_file.replace('```', '').strip() # –£–¥–∞–ª—è–µ–º '```' –µ—Å–ª–∏ –æ–Ω –ø–æ–ø–∞–ª —Å—é–¥–∞
                                # –û—á–∏—â–∞–µ–º –æ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –≤–≤–µ—Ä—Ö –ø–æ –¥–µ—Ä–µ–≤—É
                                if current_file.startswith('/') or '..' in current_file:
                                     logger.warning(f"ProjectManagerAgent: –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {current_file}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                                     current_file = None # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –ø—É—Ç–∏
                                else:
                                     logger.debug(f"ProjectManagerAgent: –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞: {current_file}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ Markdown
            code_block_match = re.match(r'^\s*```([a-zA-Z0-9_+-]*)\s*$', line)
            if code_block_match:
                if in_code_block:
                    # –ó–∞–∫—Ä—ã—Ç–∏–µ –±–ª–æ–∫–∞ –∫–æ–¥–∞
                    in_code_block = False
                    if current_file and current_code:
                        file_blocks[current_file] = '\n'.join(current_code)
                        logger.debug(f"ProjectManagerAgent: –°–æ—Ö—Ä–∞–Ω–µ–Ω –±–ª–æ–∫ –∫–æ–¥–∞ –¥–ª—è —Ñ–∞–π–ª–∞: {current_file}")
                        current_code = []
                        current_file = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–ª–æ–∫–∞
                    else:
                         # –ï—Å–ª–∏ –±–ª–æ–∫ –∫–æ–¥–∞ –∑–∞–∫—Ä—ã—Ç, –Ω–æ –Ω–µ—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∫–æ–¥–∞, –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                         current_code = []
                         current_file = None
                    code_block_language = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —è–∑—ã–∫
                else:
                    # –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –∫–æ–¥–∞
                    in_code_block = True
                    code_block_language = code_block_match.group(1).strip() or None # –ò–∑–≤–ª–µ–∫–∞–µ–º —è–∑—ã–∫, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                    logger.debug(f"ProjectManagerAgent: –ù–∞–π–¥–µ–Ω –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ –±–ª–æ–∫–∞ –∫–æ–¥–∞. –Ø–∑—ã–∫: {code_block_language}")

            elif in_code_block:
                # –í–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ –∫–æ–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏
                current_code.append(line)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞ –∫–æ–¥–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
        if in_code_block and current_file and current_code:
             file_blocks[current_file] = '\n'.join(current_code)
             logger.debug(f"ProjectManagerAgent: –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ –∫–æ–¥–∞ –¥–ª—è —Ñ–∞–π–ª–∞: {current_file}")

        logger.info(f"ProjectManagerAgent: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ {len(file_blocks)} –±–ª–æ–∫–æ–≤.")
        return file_blocks

    def _extract_code_blocks_alternative(self, code_text):
        """
        –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞, –∫–æ–≥–¥–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
        –ò—â–µ—Ç –±–ª–æ–∫–∏ –∫–æ–¥–∞ –º–µ–∂–¥—É ``` –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
        
        Args:
            code_text: –¢–µ–∫—Å—Ç —Å –∫–æ–¥–æ–º
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å {–∏–º—è_—Ñ–∞–π–ª–∞: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ}
        """
        logger.info("ProjectManagerAgent: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞.")
        file_blocks = {}
        
        # –ò—â–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞ –º–µ–∂–¥—É ```
        code_pattern = re.compile(r'```([a-zA-Z0-9_+-]*)\n(.*?)\n```', re.DOTALL)
        code_matches = code_pattern.finditer(code_text)
        
        # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –±–ª–æ–∫–æ–≤ –±–µ–∑ –∏–º–µ–Ω–∏
        unnamed_block_counter = 1
        
        # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —è–∑—ã–∫–æ–≤ –∏ —Ç–∏–ø–∏—á–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤
        language_extensions = {
            'python': '.py',
            'javascript': '.js',
            'typescript': '.ts',
            'java': '.java',
            'cpp': '.cpp',
            'c': '.c',
            'go': '.go',
            'ruby': '.rb',
            'php': '.php',
            'rust': '.rs',
            'csharp': '.cs',
            'html': '.html',
            'css': '.css',
            'json': '.json',
            'yaml': '.yml',
            'shell': '.sh',
            'bash': '.sh',
            'sql': '.sql',
            'markdown': '.md',
            'text': '.txt'
        }
        
        for match in code_matches:
            language = match.group(1).strip()
            code_content = match.group(2)
            
            # –ò—â–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–æ –±–ª–æ–∫–∞ –∫–æ–¥–∞
            context_before = code_text[:match.start()]
            last_lines = context_before.split('\n')[-5:]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫ –ø–µ—Ä–µ–¥ –±–ª–æ–∫–æ–º
            
            file_name = None
            
            # –ò—â–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö –ø–µ—Ä–µ–¥ –±–ª–æ–∫–æ–º –∫–æ–¥–∞
            file_indicators = ['—Ñ–∞–π–ª:', 'file:', 'module:', '–º–æ–¥—É–ª—å:', '–ø—É—Ç—å:', 'path:']
            for line in reversed(last_lines):
                for indicator in file_indicators:
                    if indicator in line.lower():
                        parts = line.split(indicator, 1)
                        if len(parts) > 1:
                            potential_file = parts[1].strip().strip('`"\' \t:')
                            if potential_file and ('.' in potential_file or '/' in potential_file or '\\' in potential_file):
                                file_name = potential_file
                                break
                if file_name:
                    break
            
            # –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–∑—ã–∫–∞
            if not file_name:
                extension = language_extensions.get(language.lower(), '.txt') if language else '.txt'
                file_name = f"file_{unnamed_block_counter}{extension}"
                unnamed_block_counter += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫ –∫–æ–¥–∞
            file_blocks[file_name] = code_content
            logger.debug(f"ProjectManagerAgent: –ò–∑–≤–ª–µ—á–µ–Ω –±–ª–æ–∫ –∫–æ–¥–∞ –¥–ª—è —Ñ–∞–π–ª–∞: {file_name} (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)")
        
        return file_blocks

    def _create_standard_structure(self, project_name, file_blocks):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è

        Args:
            project_name: –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞
            file_blocks: –°–ª–æ–≤–∞—Ä—å —Å –±–ª–æ–∫–∞–º–∏ –∫–æ–¥–∞
        """
        logger.info(f"ProjectManagerAgent: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}'")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
        language_type = self._detect_project_language(file_blocks)
        logger.info(f"ProjectManagerAgent: –û–ø—Ä–µ–¥–µ–ª–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫ –ø—Ä–æ–µ–∫—Ç–∞: {language_type}")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
        standard_dirs = {
            "python": ["src", "tests", "docs"],
            "javascript": ["src", "public", "tests"],
            "java": ["src/main/java", "src/main/resources", "src/test/java"],
            "csharp": ["src", "tests"],
            "go": ["cmd", "pkg", "internal", "docs"],
            "ruby": ["lib", "test", "docs"],
            "php": ["src", "public", "tests"],
            "unknown": ["src", "tests", "docs"]
        }

        dirs_to_create = standard_dirs.get(language_type, standard_dirs["unknown"])
        
        for directory in dirs_to_create:
            dir_path = os.path.join(directory, ".gitkeep")
            logger.info(f"ProjectManagerAgent: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{directory}'")
            try:
                self.project_manager.create_file(project_name, dir_path, "")
                logger.info(f"ProjectManagerAgent: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{directory}' —Å–æ–∑–¥–∞–Ω–∞.")
            except Exception as e:
                logger.error(f"ProjectManagerAgent: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{directory}': {str(e)}", exc_info=True)

    def _detect_project_language(self, file_blocks):
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º —Ñ–∞–π–ª–æ–≤

        Args:
            file_blocks: –°–ª–æ–≤–∞—Ä—å —Å –±–ª–æ–∫–∞–º–∏ –∫–æ–¥–∞

        Returns:
            str: –¢–∏–ø —è–∑—ã–∫–∞ (python, javascript, java, csharp, go, ruby, php, unknown)
        """
        extensions = {
            ".py": "python",
            ".js": "javascript",
            ".ts": "javascript",
            ".jsx": "javascript",
            ".tsx": "javascript",
            ".java": "java",
            ".cs": "csharp",
            ".go": "go",
            ".rb": "ruby",
            ".php": "php",
            ".html": "javascript",  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ HTML —á–∞—Å—Ç–æ –∏–¥–µ—Ç —Å JavaScript
            ".css": "javascript",
            ".json": "javascript"
        }
        
        # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –ø–æ —è–∑—ã–∫–∞–º
        language_counts = {}
        
        for file_path in file_blocks.keys():
            _, ext = os.path.splitext(file_path)
            ext = ext.lower()
            
            language = extensions.get(ext, "unknown")
            language_counts[language] = language_counts.get(language, 0) + 1
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–∞–π–ª–æ–≤
        max_language = max(language_counts.items(), key=lambda x: x[1], default=("unknown", 0))
        return max_language[0]

    def _directory_exists(self, project_name, directory):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
        
        Args:
            project_name: –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞
            directory: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
            
        Returns:
            bool: True, –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º list_files –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            files = self.project_manager.list_files(project_name)
            for file_path in files:
                if file_path.startswith(directory + '/') or file_path == directory:
                    return True
            return False
        except Exception:
            return False
            
    def _create_directory_with_parents(self, project_name, directory):
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –≤—Å–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        
        Args:
            project_name: –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞
            directory: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
        """
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø—É—Ç—å –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        components = directory.split('/')
        current_path = ""
        
        for component in components:
            if component:
                if current_path:
                    current_path = f"{current_path}/{component}"
                else:
                    current_path = component
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                if not self._directory_exists(project_name, current_path):
                    try:
                        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª .gitkeep –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        self.project_manager.create_file(project_name, f"{current_path}/.gitkeep", "")
                        logger.debug(f"ProjectManagerAgent: –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{current_path}' –≤ –ø—Ä–æ–µ–∫—Ç–µ '{project_name}'")
                    except Exception as e:
                        logger.error(f"ProjectManagerAgent: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{current_path}': {str(e)}")

    def _create_readme(self, project_name, project_settings, created_files):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ README.md —Ñ–∞–π–ª–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞

        Args:
            project_name: –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞
            project_settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
            created_files: –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        logger.info(f"ProjectManagerAgent: –°–æ–∑–¥–∞–Ω–∏–µ README.md –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}'")
        
        description = project_settings.get("project_description", "")
        author = project_settings.get("author", "MultiAgent System")
        version = project_settings.get("version", "0.1.0")
        
        readme_content = f"""# {project_name}

{description}

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

```
{project_name}/
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤
        if created_files:
            for file_path in sorted(created_files):
                readme_content += f"‚îú‚îÄ‚îÄ {file_path}\n"
        else:
            readme_content += "‚îî‚îÄ‚îÄ (–ü—É—Å—Ç–æ–π –ø—Ä–æ–µ–∫—Ç)\n"
        
        readme_content += "```\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –∏ –∞–≤—Ç–æ—Ä–µ
        readme_content += f"""## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ

- –í–µ—Ä—Å–∏—è: {version}
- –ê–≤—Ç–æ—Ä: {author}
- –°–æ–∑–¥–∞–Ω–æ: –ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π

## –õ–∏—Ü–µ–Ω–∑–∏—è

{project_settings.get("license", "MIT")}
"""
        
        try:
            result = self.project_manager.create_file(project_name, "README.md", readme_content)
            if result["success"]:
                logger.info(f"ProjectManagerAgent: README.md –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
            else:
                logger.error(f"ProjectManagerAgent: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ README.md: {result['message']}")
        except Exception as e:
            logger.error(f"ProjectManagerAgent: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ README.md: {str(e)}", exc_info=True)

    def _create_gitignore(self, project_name):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ .gitignore —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞

        Args:
            project_name: –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞
        """
        logger.info(f"ProjectManagerAgent: –°–æ–∑–¥–∞–Ω–∏–µ .gitignore –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}'")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
        files = self.project_manager.list_files(project_name)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø—Ä–æ–µ–∫—Ç–∞
        language_type = "unknown"
        extensions = {".py": "python", ".js": "javascript", ".java": "java", ".cs": "csharp", ".go": "go", ".rb": "ruby", ".php": "php"}
        
        for file_path in files:
            _, ext = os.path.splitext(file_path)
            ext = ext.lower()
            if ext in extensions:
                language_type = extensions[ext]
                break
        
        # –ë–∞–∑–æ–≤—ã–π .gitignore –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        gitignore_content = """# –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
.DS_Store
Thumbs.db

# –õ–æ–≥–∏
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
tmp/
temp/
.tmp/
.temp/

# –§–∞–π–ª—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤
.idea/
.vscode/
*.swp
*.swo
*~
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —è–∑—ã–∫–∞ –∑–∞–ø–∏—Å–∏
        if language_type == "python":
            gitignore_content += """
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
*.egg-info/
.installed.cfg
*.egg
venv/
.venv/
.pytest_cache/
.coverage
htmlcov/
"""
        elif language_type == "javascript":
            gitignore_content += """
# JavaScript/Node.js
node_modules/
coverage/
.npm/
.yarn/
.pnp.*
.cache/
dist/
build/
.next/
.nuxt/
.vuepress/dist
.serverless/
.fusebox/
"""
        elif language_type == "java":
            gitignore_content += """
# Java
*.class
*.jar
*.war
*.ear
*.zip
*.tar.gz
*.rar
target/
.gradle/
build/
.mvn/
"""
        elif language_type == "csharp":
            gitignore_content += """
# C#
bin/
obj/
.vs/
*.user
*.suo
*.userprefs
*.sln.docstates
*.pidb
*.pdb
*.mdb
"""
        
        try:
            result = self.project_manager.create_file(project_name, ".gitignore", gitignore_content)
            if result["success"]:
                logger.info(f"ProjectManagerAgent: .gitignore –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
            else:
                logger.error(f"ProjectManagerAgent: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ .gitignore: {result['message']}")
        except Exception as e:
            logger.error(f"ProjectManagerAgent: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ .gitignore: {str(e)}", exc_info=True)

    def create_prompt(self, input_text, context=None):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è ProjectManagerAgent.
        –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –∞–≥–µ–Ω—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç
        –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ LLM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤.

        Args:
            input_text: –ö–æ–¥ –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç

        Returns:
            str: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        context_str = str(context) if context else "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
        
        return f"""
        –¢—ã –æ–ø—ã—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ü–û. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å 
        –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –∏ —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ.
        
        # –ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
        {input_text}
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:
        {context_str}
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
        1. –û–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        2. –°–æ–∑–¥–∞–π –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        3. –†–∞–∑–º–µ—Å—Ç–∏ —Ñ–∞–π–ª—ã —Å –∫–æ–¥–æ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
        4. –°–æ–∑–¥–∞–π –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        5. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ —Å–æ–±—Ä–∞–Ω
        
        # –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å JSON-–æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞:
        {
            "project_name": "–∏–º—è_–ø—Ä–æ–µ–∫—Ç–∞",
            "language": "—è–∑—ã–∫_–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
            "structure": [—Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π],
            "configs": [–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã],
            "commands": {
                "build": "–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±–æ—Ä–∫–∏",
                "run": "–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞",
                "test": "–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            }
        }
        """